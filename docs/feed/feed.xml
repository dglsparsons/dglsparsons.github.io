<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>dgls | blog</title>
	<subtitle>Feed</subtitle>
	
	<link href="https://dgls.dev/feed/feed.xml" rel="self"/>
	<link href="https://dgls.dev"/>
	<updated>2021-01-18T11:00:00+00:00</updated>
	<id>https://dglsparsons.github.io</id>
	<author>
		<name>Douglas Parsons</name>
		<email></email>
	</author>
	
	<entry>
		<title>You should only write USEFUL tests</title>
		<link href="https://dgls.dev/posts/on-testing/"/>
		<updated>2020-09-18T00:00:00+00:00</updated>
		<id>https://dgls.dev/posts/on-testing/</id>
		<content type="html">
		  &lt;p&gt;Through my career in software I&#39;ve come across a broad range of attitudes and opinions towards testing code. The two
extremes being that &#39;tests aren&#39;t worth writing because something is too complicated&#39;, or that
&#39;every single piece of code being checked in should be accompanied by tests&#39;. Of
these two contrasting opinions the latter, although not always in such an extreme form, is much more prevalent.
Here, I will argue three cases why we don&#39;t always need to test code: the obvious correctness isolated pieces of code can
have; the redundancy badly coupled tests can experience when refactoring; and the often immutability of
business-critical code. Instead, I believe that we should be carefully considering where tests truly are required before implementing any.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/480/1*6GgUsO9PL5nBpJi6RROcOg.jpeg&quot; alt=&quot;Your tests are bad and you should feel bad&quot;&gt;&lt;/p&gt;
&lt;h2&gt;The Obvious&lt;/h2&gt;
&lt;p&gt;If you have ever taken a tutorial, watched a course, or read a book on unit testing, you have probably seen an example
that tests a piece of code along the lines of the following:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No doubt you&#39;ll then go on to be shown exactly how you&#39;d write a test that checks a variety of inputs to make sure the
&lt;code&gt;Sum&lt;/code&gt; function produces the right results for every possible case you can think of.&lt;/p&gt;
&lt;p&gt;What these tutorials all fail to consider though, is whether the function requires a test in the first place. Having a
look at the above example, do you think there&#39;s any possibility it&#39;s not doing what it claims to be? Could it be
expressed in a simpler way? Is it hard to wrap your head around? The answer to all three of these questions is
(hopefully) no. This illustrates how code can be intuitively correct at a glance, without the need for extensive proof
or testing. Sir Tony Hoare, a hugely influential computer scientist, infamously said the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“There are two ways of constructing a piece of software: One is to make it so simple that there are obviously no
errors, and the other is to make it so complicated that there are no obvious errors.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This piece of rhetoric fits in perfectly with the questions we asked of the &lt;code&gt;Sum&lt;/code&gt; example. In practice we can see that
tests are only really needed when something is &#39;so complicated that there are no obvious errors&#39;. These tests would then
prove value by showing that these non-obvious errors don&#39;t exist. So for simple, &#39;obviously&#39; correct code, is there any
need to add tests? Instead, before adding tests, you should ask the question: &#39;Is this code obviously correct, or can I change
it make it obviously correct?&#39;. If the answer to this question is yes, then there is no need to test what is obvious.&lt;/p&gt;
&lt;h2&gt;The Coupled&lt;/h2&gt;
&lt;p&gt;When deciding on what level of tests to write for a system (unit / service / ui / integration / end-to-end, or various
other names), the &lt;a href=&quot;https://martinfowler.com/bliki/TestPyramid.html&quot;&gt;&#39;Testing Pyramid&#39;&lt;/a&gt; immediately springs to mind.
If you haven&#39;t seen the idea before, it suggests that we do the majority of our testing at the individual &#39;unit&#39; level,
This unit level results in tests are fast to run and can quickly, cheaply and efficiently provide a high level of code
coverage. We should then provide higher level tests in a much sparser manner, relying on
these to effectively prove that everything is wired up and communicating properly, rather than for checking individual
branches in logic.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://martinfowler.com/bliki/images/testPyramid/test-pyramid.png&quot; alt=&quot;The Testing Pyramid&quot;&gt;&lt;/p&gt;
&lt;p&gt;This system is straightforward and initially makes complete sense. It is also the commonly accepted practice. However, it
fails to acknowledge that the disposability of code, or the ability to refactor can be a major consideration in what tests
to write and how to write them. Any system undergoing continual work will see units, or isolated pieces of code appear,
disappear, and take completely different forms over time. This is the natural progress and evolution of working, living
software. To emphasise this point, I ask &#39;have you ever refactored a section of a codebase, to find that existing unit
tests are made completely irrelevant or redundant?&#39;. If so, this shows that the initial tests were overly coupled to the
layout and structure of the code. Remember that tests are simply more code that agrees with the initial code you just wrote
(or if performing TDD, they are simply more code that agrees with the code you are about to write).&lt;/p&gt;
&lt;p&gt;In areas of code that are rapidly and constantly changing in structure, higher level tests provide a greater level of
maintainability and stability, as the higher-level workings of a system are typically more stable.
These tests are significantly less likely to be made completely redundant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/titanic-tests.png&quot; alt=&quot;Titanic Sinking&quot;&gt;&lt;/p&gt;
&lt;p&gt;This, however, poses an interesting conundrum: how do we know when code
is likely to change in structure or approach in the future? If we could identify these areas ahead of time, then our
newfound prescience could simply mean we write them in a better form the first time around. Sadly, however, we are left fumbling in the
dark: attempts at organising code are a &#39;best efforts&#39; approach given a current state of knowledge.&lt;/p&gt;
&lt;p&gt;We do, however,
get an increased understanding of a system the longer it exists, or the longer we work on it. This allows informed
decisions about what testing is fully appropriate. Young systems, or systems with a high degree of uncertainty benefit
the most from high-level &#39;black-box&#39; style testing, as these are the most likely to undergo structural change over time.
These tests are much less likely to risk redundancy.
Contrastingly older, more stable, or better understood systems benefit more from the flexibility and efficient coverage
that unit testing can provide.&lt;/p&gt;
&lt;p&gt;Overall, the age, stability and uncertainty of a system need to underpin what tests we
write: the testing pyramid provides an oversimplified view of the world, but a useful tool to consider. However, we need
to supplement this with our understanding of code and its evolution over time, asking &#39;how long will these tests be
relevant for?&#39; or &#39;are these likely to be irrelevant in X months/years time?&#39;.&lt;/p&gt;
&lt;h2&gt;The Immobile&lt;/h2&gt;
&lt;p&gt;On many of the large scale software projects I have worked on, a rather interesting irony has been present: the most
important, business critical pieces of code are often the most insufficiently tested. Their outputs lack clear
definition and seemingly any small change could spell disaster. Yet however, they remain this way.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/immobile.webp&quot; alt=&quot;Unmoveable rock&quot;&gt;&lt;/p&gt;
&lt;p&gt;Several years ago I
worked on a NHS project. This was, to massively oversimplify, an incredibly complicated and fundamental system responsible
for associating prices with hospital treatments and generating reports based on these prices. The report system was well
tested, with thousands of tests meticulously checking every single possible output for a massive variety of inputs. Despite
all this, the core of the project, the pricing system, was almost entirely lacking in tests. It was only
truly tested as a side-effect in testing the reports. The code was incredibly hard to work with and was not amenable to
testing, and so it never was. At the time I didn&#39;t understand how it could be left that way when it was such a
fundamental part of the system.&lt;/p&gt;
&lt;p&gt;I&#39;ve later realised the rationale is incredibly simple. The original code was written as a proof of
concept. It worked, and as a result became the production code. Nobody wanted to make any changes for fear of causing an
unknown regression that could be incredibly difficult and costly to track down and fix. Similarly the process for assigning a
price was a fixed piece of logic: it didn&#39;t change over time, no new requirements changed how it worked, and nobody
really needed to know how it worked internally - just that it did. The cost of not having any tests, even for such an
important piece of code, was massively outweighed by the risk in changing the code to make it testable and the effort in
testing it.&lt;/p&gt;
&lt;p&gt;Am I advocating not testing crucial business systems here? No - not at all! However it&#39;s important to recognise that we
don&#39;t live in a perfect world. Systems missing tests for crucial parts exist &lt;em&gt;everywhere&lt;/em&gt;, and are far more prevalent
than I&#39;d like to admit. However, this isn&#39;t the catastrophe younger me thought it was. If a piece of code is complicated,
but it works and never changes, then does it matter if it is poorly tested? Adding tests when making changes however,
would still be prudent - but we can still ask the question: &#39;does the benefit of testing this piece of code outweigh the
difficulty of adding tests?&#39;. It&#39;s a dangerous question to ask, and the answer is almost exclusively &#39;yes - add the
tests&#39;. But just maybe, sometimes, it&#39;s a worthy thing to consider.&lt;/p&gt;
&lt;h2&gt;To Conclude&lt;/h2&gt;
&lt;p&gt;The approach to creating well-designed test suites that provide continual value throughout the lifecycle of a project is
a difficult task. Advocates of a &#39;testing pyramid&#39; approach oversimplify the matter. While the intention is good, it
fails to root itself in the practicality of the ever-changing world of software development: the evolution of code over
time can easily render tests redundant or unnecessary, and at times those tests can even be a barrier to refactoring. The
&#39;obvious&#39; nature clean code can possess also reduces the need for tests as a proof of correct behaviour. Similarly, a
simple cost-benefit analysis should be considered when regarding existing code that is known to be correct and is unchanging,
or changing very infrequently. Not all tests are worth writing. Not everything has to be tested, and that is fine.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Task - An easy to use tool to simplify your build</title>
		<link href="https://dgls.dev/posts/task-a-simple-automation-tool/"/>
		<updated>2020-09-25T00:00:00+00:00</updated>
		<id>https://dgls.dev/posts/task-a-simple-automation-tool/</id>
		<content type="html">
		  &lt;p&gt;At Shamaazi we&#39;ve been using a tool called &lt;a href=&quot;https://taskfile.dev/&quot;&gt;&lt;code&gt;task&lt;/code&gt;&lt;/a&gt;. It&#39;s an incredibly powerful tool that can completely replace Makefiles (an old C build system), or complicated scripts, with a much simpler and arguably more powerful alternative. Outside of that, it&#39;s an incredibly useful organiser for all command-line related activities.&lt;/p&gt;
&lt;p&gt;At Shamaazi we have a monolithic codebase, containing 7 different UIs, hundreds of services and all our infrastructure provisioning. We use &lt;code&gt;task&lt;/code&gt; to manage all of this, as well as performing housekeeping jobs such as deleting user data when requested or changing peoples contact addresses. We find it incredibly powerful for this as it&#39;s easy to read config, self-documenting nature, and ability to only run commands that need running all save us tonnes of time waiting for builds, searching for commands, or editing config. It&#39;s equally valuable on small codebases too.&lt;/p&gt;
&lt;p&gt;Let&#39;s have a quick explore of what &lt;code&gt;task&lt;/code&gt; is, and what it&#39;s capable of.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The simplest way to install &lt;code&gt;task&lt;/code&gt; is through an install script they provide.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -sL https://taskfile.dev/install.sh &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, there are a tonne of other methods to install it, such as through &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;snap&lt;/code&gt; or &lt;code&gt;scoop&lt;/code&gt;. You can find them all &lt;a href=&quot;https://taskfile.dev/#/installation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once installed we can run &lt;code&gt;task --init&lt;/code&gt; in a directory we want to issue commands from. This will create a simple &lt;code&gt;Taskfile.yml&lt;/code&gt; file. This file is in YAML format - an incredibly popular human-readable file format. This &lt;code&gt;Taskfile.yml&lt;/code&gt; file is used to define all the possible tasks we want to run. Initially, it just contains a &lt;code&gt;Hello, World!&lt;/code&gt; example.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# https://taskfile.dev&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;GREETING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; World&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; echo &quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.GREETING&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;task&lt;/code&gt; (or &lt;code&gt;task default&lt;/code&gt;) will run the &lt;code&gt;default&lt;/code&gt; task defined above, printing &lt;code&gt;Hello, World!&lt;/code&gt;. We can break down the file into some clear sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;version: &#39;3&#39;&lt;/code&gt; - this defines the version of Taskfile to use. We don&#39;t need to pay too much attention, but this
prevents and future releases from stopping your tasks from working.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars:&lt;/code&gt; - this section defines any globally accessible variables we want to use. We can see a single variable,
&lt;code&gt;GREETING&lt;/code&gt; defined as the &lt;code&gt;Hello, World!&lt;/code&gt;. These variables are really powerful, and can reference other variables,
or can be derived entirely from the output of a command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tasks:&lt;/code&gt; - this section is where the actual tasks are defined. At the moment we just have a single task called
&lt;code&gt;default&lt;/code&gt;. When this task is run, it will run the command &lt;code&gt;echo &amp;quot;{{.GREETING}}&amp;quot;&lt;/code&gt;. The &lt;code&gt;silent: true&lt;/code&gt; line simply prevents &lt;code&gt;task&lt;/code&gt; from printing out the command that is being run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This serves a super quick introduction. But let&#39;s cover some of the more powerful features.&lt;/p&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;In the previous section, I mention that the GREETING variable could be derived from the output of a command. This is sometimes incredibly useful for deriving information that isn&#39;t immediately available.  For a quick example of this, let&#39;s change the &lt;code&gt;vars&lt;/code&gt; section to the following:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;GREETING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $(whoami)&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;task&lt;/code&gt; now will output &lt;code&gt;Hello, dglsparsons!&lt;/code&gt; (or whatever your username happens to be!). As it&#39;s executing a command, this could literally be anything. Let&#39;s use &lt;code&gt;wttr.in&lt;/code&gt; to provide the weather (and using &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt; to quickly make something of the output. We can then add this to a second task.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;GREETING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $(whoami)&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;&quot;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;WEATHER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; curl &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;s wttr.in&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;format=j1 &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;r .current_condition&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;.weatherDesc&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;.value&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; echo &quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.GREETING&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; echo &quot;There be &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.WEATHER&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;task&lt;/code&gt; now will still print out the same greeting. However, running &lt;code&gt;task weather&lt;/code&gt; will print out something along the lines of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;There be Haze.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was quick and easy. And now we&#39;ve got that command saved for good, in a nice memorable location.&lt;/p&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;So our tasks are useful, but they would be a lot more useful if they explained what they did. Let&#39;s add some short descriptions to them. This can be done through the &lt;code&gt;desc&lt;/code&gt; key on each task.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Prints a greeting.&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; echo &quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.GREETING&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Prints out the current weather.&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; echo &quot;There be &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.WEATHER&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now run &lt;code&gt;task -l&lt;/code&gt; or &lt;code&gt;task --list&lt;/code&gt; to show a handy summary of all the available tasks.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;$ task &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;list&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;Available tasks for this project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;* default&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 	Prints a greeting.&lt;br&gt;* weather&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 	Prints out the current weather.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes the tasks much easier to remember in the future!&lt;/p&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;Rather than going and downloading a weather forecast every single we want to check, let&#39;s create a task to write the weather forecast into a file.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;GREETING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $(whoami)&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;&quot;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;WEATHER_FILE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; weather.json&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Prints a greeting.&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; echo &quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.GREETING&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;download-weather&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Downloads a weather forecast into a file&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; curl &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;s wttr.in&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;format=j1 &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.WEATHER_FILE&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a good start, but running &lt;code&gt;download-weather&lt;/code&gt; will always download the forecast. If we were using some file as an input, you could set this as a &lt;code&gt;source&lt;/code&gt;, even with a wildcard. This is incredibly useful for building code only when required. e.g.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; go build .&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./&lt;span class=&quot;token important&quot;&gt;*.go&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will only run &lt;code&gt;go build&lt;/code&gt; if any &lt;code&gt;.go&lt;/code&gt; files have been updated. For our purposes though, we don&#39;t have input files. Instead, we can use the &lt;code&gt;status&lt;/code&gt; field to check programatically.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;download-weather&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Downloads a weather forecast into a file&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; curl &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;s wttr.in&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;format=j1 &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.WEATHER_FILE&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; test &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;f ./&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.WEATHER_FILE&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;task download-weather&lt;/code&gt; multiple times will result in the file being downloaded the first time, but not subsequently. Instead, a message is produced: &lt;code&gt;task: Task &amp;quot;download-weather&amp;quot; is up to date&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s go one step further and make our previous &lt;code&gt;weather&lt;/code&gt; task depend on the weather file being downloaded. This can be done easily through a &lt;code&gt;deps&lt;/code&gt; field. This means running the &lt;code&gt;weather&lt;/code&gt; command would attempt to run &lt;code&gt;download-weather&lt;/code&gt;. download-weather, in turn, will download the weather into a file, but, only if the file isn&#39;t already present... This sounds a mouthful, but bear with me and you&#39;ll hopefully see the value in this!&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;  &lt;span class=&quot;token key atrule&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Prints out the current weather.&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; download&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;weather&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; echo &quot;There be $(cat &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;.WEATHER_FILE&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;r .current_condition&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;.weatherDesc&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;.value)&quot;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;task weather&lt;/code&gt; will produce the following output if there is weather to download:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;task: &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -s wttr.in?format&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;j1 &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; weather.json&lt;br&gt;There be Haze&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, running it again will not download anything, and just print the value of the weather out:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;task: Task &lt;span class=&quot;token string&quot;&gt;&quot;download-weather&quot;&lt;/span&gt; is up to &lt;span class=&quot;token function&quot;&gt;date&lt;/span&gt;&lt;br&gt;There be Haze&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now hopefully see the value in this! We only do work if we have to, and each task can easily check if it has work to do. This can be incredibly useful for software development. For example, we could create a &lt;code&gt;deploy&lt;/code&gt; task that depends on a &lt;code&gt;build&lt;/code&gt; task. The &lt;code&gt;build&lt;/code&gt; task will only build if the code has been updated since the last &lt;code&gt;build&lt;/code&gt;. We can even make the &lt;code&gt;deploy&lt;/code&gt; only perform an actual deployment if the built files are newer than the last deployment.&lt;/p&gt;
&lt;h2&gt;A Real World Example&lt;/h2&gt;
&lt;p&gt;So far we&#39;ve looked at a rather contrived example using &lt;code&gt;curl&lt;/code&gt; to download a weather forecast. Instead, let&#39;s look at a common code example of building a javascript project. We can define the desired behaviour as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;running &lt;code&gt;task build&lt;/code&gt; should run &lt;code&gt;npm run build&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt; should only be run if there are any new changes to our source files since the last build.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt; should only be run if the latest &lt;code&gt;node_modules&lt;/code&gt; are installed.&lt;/li&gt;
&lt;li&gt;the latest &lt;code&gt;node_modules&lt;/code&gt; should be installed only if there have been changes to our packages since the last install.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These three conditions can be checked using the magical &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;find&lt;/code&gt; tools. &lt;code&gt;test&lt;/code&gt; can be used to check if an output of a command returns some content (using &lt;code&gt;test -z&lt;/code&gt;). It is also capable of checking whether files exist using &lt;code&gt;test -f&lt;/code&gt;, and whether directories exist using &lt;code&gt;test -d&lt;/code&gt;. If a file/directory doesn&#39;t exist, or a command returned some output, then the process will exit with a status code, indicating the command failed. Finally, &lt;code&gt;find&lt;/code&gt; can be used along with the
&lt;code&gt;-newer&lt;/code&gt; flag to find files that are newer than our output.&lt;/p&gt;
&lt;p&gt;Our Taskfile.yml could look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# https://taskfile.dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; prefixed&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Build all static artifacts into build&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; node_modules &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm run build&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Lets check that our output directory exists&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; test &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;d build&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# And that our index.html file exists&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; test &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;f build/index.html&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Finally, check if there are any files in `src`, `public` or `node_modules` that are newer than&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# out build/index.html output.&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; test &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;z &quot;$(find src public node_modules &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;type f &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;newer build/index.html)&quot;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install all dependencies&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;cmds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm ci&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Lets check that node_modules exists&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; test &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;d node_modules&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Finally, we are up to date if any files in node_modules are newer than package.json&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; test &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;n &quot;$(find node_modules/ &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;type f &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;newer package.json)&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let&#39;s test this out. The first run of &lt;code&gt;task build&lt;/code&gt; will do the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ task build&lt;br&gt;task: &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; ci&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; core-js@2.6.11 postinstall &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;br&gt;task: &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run build&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; some_project@1.0.0 build &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On a second run the following happens though:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ task build&lt;br&gt;task: Task &lt;span class=&quot;token string&quot;&gt;&quot;node_modules&quot;&lt;/span&gt; is up to &lt;span class=&quot;token function&quot;&gt;date&lt;/span&gt;&lt;br&gt;task: Task &lt;span class=&quot;token string&quot;&gt;&quot;build&quot;&lt;/span&gt; is up to &lt;span class=&quot;token function&quot;&gt;date&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any changes to &lt;code&gt;package.json&lt;/code&gt; will result in the dependencies being installed again and then the build being rerun.  Any change to any &lt;code&gt;src/&lt;/code&gt; files will result in just the build being rerun. This can save a lot of time as builds are run over and over again.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Through this short guide, we&#39;ve built a very clever, but easy to read and follow, set of tasks. These tasks are capable of documenting themselves allowing them to be easily read and understood. Additionally, the &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;sources&lt;/code&gt; fields can be used to create tasks that only perform actions when they need to. We can chain these tasks together through the &lt;code&gt;deps&lt;/code&gt; field. Chaining tasks in this manner can easily optimize a previously difficult task by breaking it into component parts and skipping any parts that do not need to be executed. We&#39;ve seen this through two different examples - a contrived weather downloader and a more typical npm project. Through these examples, we&#39;ve highlighted the power and convenience that &lt;code&gt;task&lt;/code&gt; can provide. Anyone can easily benefit from using it, and hopefully, you can see why we love it at Shamaazi.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>A Trick to Help With Reference Data</title>
		<link href="https://dgls.dev/posts/a-simple-reference-data-trick/"/>
		<updated>2020-09-30T00:00:00+00:00</updated>
		<id>https://dgls.dev/posts/a-simple-reference-data-trick/</id>
		<content type="html">
		  &lt;p&gt;Nearly all enterprise systems have a concept of reference data. From website
configuration, lookup tables, ID-to-ID conversions or domain-specific data, reference data is extremely prevalent and can
take many different forms. For years I made the same mistake over and over in managing this reference data. Let&#39;s have
a look at this common reference data pitfall, why it&#39;s so easy to fall into, and finally a nice trick to keep
reference data simple.&lt;/p&gt;
&lt;h2&gt;The mistake&lt;/h2&gt;
&lt;p&gt;A couple of years ago I worked on a data processing system for an internal product the company I worked for was
developing. This product, among other things, performed a series of derivations from submitted data. The most notable
of these was deriving a county from a given postcode (in the UK).&lt;/p&gt;
&lt;p&gt;When initially given the requirement to do this lookup, I envisaged a whole reference data system. Counties in the UK are not
completely static, and their boundaries change gradually over time. Also, new postcodes get added fairly
frequently. This meant the reference data would periodically need updating. My brain immediately jumped to a solution: there would be a tool or
system that pulled reference data from the source (&lt;a href=&quot;http://ons.gov.uk/&quot;&gt;ons.gov.uk&lt;/a&gt;); this reference data would be written into a database (this
could be a SQL database or a document store like DynamoDB. We could then simply query the database to perform any
lookups we needed and updating the reference data would just be running a tool. Simple enough?&lt;/p&gt;
&lt;p&gt;Despite initially sounding simple, there&#39;s a fair amount of hidden complexity within a system like this though. First of
all, we need to think about how a database will be provisioned and set up - it needs deploying somewhere with an
appropriate amount of memory and storage. This should also be isolated from the internet but not from our application
to prevent anyone with malicious intent from being able to access the database directly. We&#39;d then need to consider
database Schemas, and how to handle migrations to setup or update these. We then need to consider database users, making
sure we can update the reference data with sufficient write permissions, but that the application only connects with
read-only permissions (for the principle of least privilege). Once we have users, we need to think about how to make the
application aware of the user without exposing credentials...&lt;/p&gt;
&lt;p&gt;The whole system rapidly becomes very complicated.&lt;/p&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;This overcomplicating is an easy trap to fall into, and especially easy as there doesn&#39;t appear to be a simple solution that
fits our criteria. Where else could we store the reference data if not in a database? A file on
disk? This would still have many of the same problems as the database solution, plus loading the file contents for a
single lookup would be amazingly inefficient. We could load it into memory and keep the lookups there while the application
runs? This one is pretty close, but maintaining and updating the reference data is still unclear, and would be
a bit of overhead on startup.&lt;/p&gt;
&lt;p&gt;The solution is simple: &lt;strong&gt;treat reference data as part of your code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The trap that&#39;s easy to fall into is thinking that your reference data has to be a part of its own, separate
system. This used to be true where reference data updates needed to be deployed and a slow software development life
cycle meant applications would only get deployed every several months, or, in some extreme cases, once a year (as was
the case for one project I worked on). However, thanks to modern development practices such as Continuous Delivery, and
the reduced friction and risk through containerisation and infrastructure as code, deployments can now happen as
frequently as we like. In the case of Shamaazi, where I currently work, we often deploy our code several times per day
and every single change usually marks its own deployment.&lt;/p&gt;
&lt;p&gt;As a result of this, the simplest thing to version, manage, and keep up to date with the code that is running, is to
simply commit the reference data as part of the code. This could be &lt;code&gt;YAML&lt;/code&gt; files that are loaded as the application
starts, or, even simpler, simply converting the reference data into the language you use.
This has a twofold benefit: the application does not have &lt;em&gt;any&lt;/em&gt; overhead in accessing reference data as we&#39;ve removed all
the complexity around deploying, managing, migrating and accessing databases; but also, our reference data is now
version controlled and we can easily review changes and track them over time.&lt;/p&gt;
&lt;p&gt;You could argue that this would bloat your application, adding a significant amount of data or extra code that
would impact the application size. However, this argument would fail to accommodate how much complexity already
exists in running any application. At Shamaazi, we use Go for its simplicity, fast build times and static linking.
A compiled binary without any reference data comes in typically between 10 and 15M. Using the example of the UK
postcodes from earlier, there are around 1.7 million postcodes in the UK. Each of these is mapped to a County name.
As a raw file, this seems pretty large - it&#39;s around 43M. Compressed, however, it&#39;s much smaller (~8M). Adding it to the
Go source code results in a barely noticeable increase in the application size - and this is for a &lt;em&gt;massive&lt;/em&gt; reference
data set. If the reference data set is 500,000 records (still really big), we see around a 3M difference in Go binary size.&lt;/p&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Reference data can be tricky to manage in a way that&#39;s easy to update and easy to manage. I&#39;ve fallen victim to
overengineering systems in the past to deal with reference data. Often the simplest solutions are best, and that seems
to be the case here. Keeping reference data as part of your code doesn&#39;t have a significant impact on the code size, it
allows reference data to be updated much more easily, and it removes an incredible amount of complexity from
infrastructure. This isn&#39;t a one-size-fits-all solution though. If reference data is updated as part of the system, then this
does not work. However, for read-only reference data, this is a useful tool to add to your arsenal.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Go Logger - Why we wrote our own</title>
		<link href="https://dgls.dev/posts/why-we-wrote-our-own-logger/"/>
		<updated>2020-10-09T13:50:00+00:00</updated>
		<id>https://dgls.dev/posts/why-we-wrote-our-own-logger/</id>
		<content type="html">
		  &lt;p&gt;At Shaamazi, we created and open-sourced our logger: &lt;a href=&quot;https://github.com/shamaazi/antilog&quot;&gt;antilog&lt;/a&gt;. We created this
out of frustration at the other loggers available for Go. In our minds, they all fell short in at least one of several ways.
We wanted a logger that was simple and easy to use.
A logger that doesn&#39;t bring a mountain of dependencies.
A logger that outputs structured logs.
A logger where context can be built over time.
And finally, a logger that doesn&#39;t have log-levels.&lt;/p&gt;
&lt;p&gt;Here I&#39;ll look at the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why we care about logging so much.&lt;/li&gt;
&lt;li&gt;What the current logging landscape for Go looks like.&lt;/li&gt;
&lt;li&gt;Why each of these fundamental features (structured logging, building context and no log-levels) are so important&lt;/li&gt;
&lt;li&gt;How popular alternatives fail to meet our needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why we care about logging so much&lt;/h2&gt;
&lt;p&gt;Our largest product is a charity system that automates donations during Ramadan. Over 160,000 people, in around 140
different countries, use this product. Despite this, our engineering team is tiny with two engineers working on this
product. As a result, the ability to quickly and efficiently identify problems in our code through inspecting logs is crucial.&lt;/p&gt;
&lt;h2&gt;What other logs are there?&lt;/h2&gt;
&lt;p&gt;Go&#39;s standard library provides a &lt;a href=&quot;https://golang.org/pkg/log/&quot;&gt;logger module&lt;/a&gt;. Yet, this module is very minimal:
it gives a series of functions that can be called to log text, but little else. There are some &#39;batteries included&#39;
logging frameworks, such as &lt;a href=&quot;https://github.com/sirupsen/logrus&quot;&gt;logrus&lt;/a&gt;. Unfortunately, we wanted a middle ground
between the two. Logrus provided too much customisability. It is very verbose to use, and has a significant footprint.
However, the standard library wasn&#39;t able to provide all the features we wanted. A third alternative is the
&lt;a href=&quot;https://github.com/uber-go/zap&quot;&gt;zap&lt;/a&gt; logger created by Uber. This looks like a strong contender but adds a lot of complexity.
It has far more configuration with its various logger types (Sugar, Production, Development, etc.).
There is also a &lt;code&gt;Sync()&lt;/code&gt; function, a mix of &lt;code&gt;sprintf&lt;/code&gt; and structured logging, and log-levels.&lt;/p&gt;
&lt;p&gt;Other alternatives do exist, but we could not find one that met our criteria.&lt;/p&gt;
&lt;h2&gt;Structured Logging&lt;/h2&gt;
&lt;p&gt;Structured logging is the idea that logs should be more than a string message. They should also be able to embed and
display structured information. There are two approaches to this: using a human-readable
&lt;a href=&quot;https://brandur.org/logfmt&quot;&gt;logfmt&lt;/a&gt; format, or, writing
logs out as JSON. Logfmt has it&#39;s advantages; it is arguably more human-readable at an initial glance. However, most
tools for searching through logs, such as Splunk, Kibana or CloudWatch, provide support for JSON logs. JSON is easier
for programs to read and query and also allows complex datatypes to be expressed in logs. In our case, we are writing
logs into CloudWatch. CloudWatch provides explicit support for querying JSON logs. As a result, we are &lt;strong&gt;only&lt;/strong&gt; interested
in writing JSON.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/cloudwatch-logs.jpg&quot; alt=&quot;What our (test) logs look like in cloudwatch&quot;&gt;&lt;/p&gt;
&lt;p&gt;The ideal would be for any logger to output JSON by default. Some loggers, such as zap, meet this need. Of the main two most
popular contenders, the standard library and logrus, both fall short. The standard library doesn&#39;t provide structured logging
at all. Logrus does but requires some small amount of config to achieve this (&lt;code&gt;logrus.SetFormatter(&amp;amp;logrus.JSONFormatter{})&lt;/code&gt;).
This configuration is only a single line of code, but it is easy to miss when writing a new application, script or tool.&lt;/p&gt;
&lt;p&gt;Supporting many output formats is another pitfall. This adds more complexity to the logger, making it bulkier than we would like
(in both binary size and CPU time). Instead, a logger that outputs JSON by default with no configuration required is ideal.
antilog can be used straight out of the box, it requires no configuration at all.&lt;/p&gt;
&lt;h2&gt;Building Context&lt;/h2&gt;
&lt;p&gt;As part of our logging, we want the ability to build up of information in logs over the lifecycle of an operation.
To get a full picture of what is happening in our logs, we need to be able to provide context to any messages.
To illustrate this point, here is a pretty rubbish log message that could show an issue parsing data:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2019-11-18T14:00:32Z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;unable to parse json&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can&#39;t easily identify what is going on here: is this an application issue? is it expected? What&#39;s causing it?
By adding a small amount of context we can immediately glean much more information from our logs:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2019-11-18T14:00:32Z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;unable to parse json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/api/signup&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;request_id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1234abc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now see that it&#39;s an API endpoint for signup this happened at. From the 400 response, we can assume that this is
due to a user submitting bad data rather than an error in our system. From a small amount of context, a previously
meaningless log message  becomes valuable.&lt;/p&gt;
&lt;p&gt;Unless we have a messy codebase, the places where want to write logs don&#39;t necessarily have access to all
the information we might want. We don&#39;t want polluting to our code by passing &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;request_id&lt;/code&gt; and many other
fields around. We want the ability to attach these to our logger, building up the eventual output one piece at a time.&lt;/p&gt;
&lt;p&gt;In antilog we can build up an output by passing the logger around (or attaching it to context, if you&#39;ve done much Go):&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;    logger &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; antilog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;With&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token string&quot;&gt;&quot;common&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;this is a common field&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token string&quot;&gt;&quot;other&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I also should be logged always&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;I&#39;ll be logged with common and other field&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Me too&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;No Log levels&lt;/h2&gt;
&lt;p&gt;A lack of log-levels seems like an oversight for a logging library. However, I strongly believe they aren&#39;t necessary
and just complicate matters. Dave Cheney argues the same on &lt;a href=&quot;https://dave.cheney.net/2015/11/05/lets-talk-about-logging&quot;&gt;his blog&lt;/a&gt;.
This can be broken down by reasoning about each different log level:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Warning messages fall into one of two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;warnings you can ignore&lt;/li&gt;
&lt;li&gt;warnings you can&#39;t ignore&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Warnings that you can ignore are interesting. By definition, nothing has gone wrong. As such, they are no different to info level logs.
Warnings that you can&#39;t ignore show the opposite: they are errors that are not logged at the correct level. As it is impossible to
have a warning that does not fit into these two categories, warning as a log level is useless.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A similar approach removes the need for errors. Errors fall into one of two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Errors that you are handling (and recovering from)&lt;/li&gt;
&lt;li&gt;Errors that you are not handling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are handling the error, then the application will continue as expected, and the log line is only informational. If you are not
handling the error, then you should not be logging it. It is the responsibility of the calling code to manage this error. As it is
impossible to have an error that does not fit into these categories, the error log level is also useless.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Info:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now there are no more warnings and errors, we have a single log-level: info. By itself, this is no different to not having any log
levels at all. Instead, we have &#39;things we should log&#39; and &#39;things we shouldn&#39;t log&#39;.&lt;/p&gt;
&lt;p&gt;This argument to remove log levels can extend further. Log-levels are an attempt to provide a measure of how useful a particular
message is. This is a flawed approach as the usefulness can&#39;t be determined when the message is written. This is because we do not
know why our future selves may be looking at logs. It could be to diagnose a particular race condition, to fix a bug, or to
track user behaviour. Without knowing why we will be looking at logs, it is impossible to determine what information is going to be
the most relevant. Any attempt to predict is just noise. As a result, log-levels are a fruitless task.&lt;/p&gt;
&lt;p&gt;In the context of antilog, we wanted to avoid the typical &lt;code&gt;log.Info&lt;/code&gt;, &lt;code&gt;log.Warn&lt;/code&gt; and &lt;code&gt;log.Error&lt;/code&gt; interfaces most
loggers use. This leads to forced decision-making that is not productive. I&#39;ve been on the end of one-too-many arguments
over whether a log should be &lt;code&gt;Info&lt;/code&gt; or &lt;code&gt;Warn&lt;/code&gt; (see also &lt;a href=&quot;https://en.wiktionary.org/wiki/bikeshedding&quot;&gt;bikeshedding&lt;/a&gt;). Most
logging libraries do not give this freedom of thinking, and instead, force you to decide. We, contrastingly, provide
just a &lt;code&gt;Write&lt;/code&gt; method. Either &lt;code&gt;Write&lt;/code&gt; your logs or don&#39;t.&lt;/p&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;The current logging landscape for Go was lacking. Existing libraries overcomplicated the process of writing logs by
falling into one of four traps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forcing the use of log-levels;&lt;/li&gt;
&lt;li&gt;lacking structured logging;&lt;/li&gt;
&lt;li&gt;not allowing context to be built&lt;/li&gt;
&lt;li&gt;and allowing too much configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We sought a solution to these problems by creating our logging library, &lt;a href=&quot;https://github.com/shamaazi/antilog&quot;&gt;antilog&lt;/a&gt;.
We&#39;ve been using it for around a year now and love it.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>The DRUG of online tutorials</title>
		<link href="https://dgls.dev/posts/the-drug-of-online-tutorials/"/>
		<updated>2020-10-12T15:45:00+00:00</updated>
		<id>https://dgls.dev/posts/the-drug-of-online-tutorials/</id>
		<content type="html">
		  &lt;p&gt;Have you ever felt like you&#39;re stumbling in the dark trying to learn a new concept? Like you know where you&#39;re trying
to get to, but absolutely no idea how to get there?&lt;/p&gt;
&lt;p&gt;This is an incredibly common feeling when learning about technology. The field is MASSIVE. It&#39;s ludicrously complicated.
And to make matters even more difficult, it seems to be changing every few months.&lt;/p&gt;
&lt;p&gt;This makes programming tricky to get started in. You have no idea what you should be looking for, what to Google, or
how to find information about what you want to learn. At the same time, any information you do find doesn&#39;t seem to be
trustworthy or dependable. You find a JavaScript article from 4 years ago, but when you apply what it says, people say you&#39;re doing it
wrong, or &amp;quot;nobody does it like that anymore&amp;quot;. Looking on Stack Overflow, all the answers point to jQuery. But nobody has
used that since 2015. You feel lost.&lt;/p&gt;
&lt;p&gt;The natural reaction is to reach for tutorials. These will hold your hand, and guide you to the promised land of programming
literacy. Just study this course on Udemy. Just watch this video on YouTube. Just learn these few things. Then, you&#39;ll be set
for a lucrative career in software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They hook you in like a drug.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You spend hours finding the right videos to watch. The right course to buy. The right guides to follow online. You think
you&#39;re understanding as you watch someone build an application using the skills you&#39;d always hoped for.&lt;/p&gt;
&lt;p&gt;And when you&#39;re done? You sit down. You think you know more than when you started (because, well, you do). But you still have no idea
how to get started. You&#39;re still stumbling in the dark. You still have no idea how to get to where you want to go.&lt;/p&gt;
&lt;p&gt;The solution? More courses. More learning. It&#39;s all a lie. It&#39;s not the way to learn. It&#39;s a way to waste your time
spinning, getting nowhere.&lt;/p&gt;
&lt;p&gt;All courses fall into the same trap. They sell you a dream, and hook you in like a drug. But they DON&#39;T teach you
the skills you need to succeed on your own. They keep you hooked because of this.&lt;/p&gt;
&lt;p&gt;What&#39;s the solution? Come up with ideas of projects to build. It&#39;s tricky I know! Stumble in the
dark. Find a mentor who can shine light where you need it. Contribute to open source projects. Take part in Hacktober.
Do Advent of Code when it&#39;s Christmas.&lt;/p&gt;
&lt;p&gt;But most importantly, enjoy your time there. Enjoy being blind. Enjoy every day being an adventure. Every day being a
challenge. Learning new things until your brain hurts. Because this is what learning is about. And being a good programmer is about learning.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Learning programming is DIFFICULT</title>
		<link href="https://dgls.dev/posts/why-learning-programming-is-SO-HARD/"/>
		<updated>2020-10-20T13:18:00+00:00</updated>
		<id>https://dgls.dev/posts/why-learning-programming-is-SO-HARD/</id>
		<content type="html">
		  &lt;p&gt;Have you ever wanted to learn how to program, or to learn a new concept? Have you ever come across a technology you wanted to play around with but had no idea how to get started? Does it feel like there is &lt;em&gt;too&lt;/em&gt; much information about programming on the internet?&lt;/p&gt;
&lt;p&gt;Programming is a difficult topic to break into. It&#39;s a complicated field. There&#39;s a lot of information to learn. There are a lot of contrasting opinions on the internet. The field moves amazingly fast, with new trends and technologies popping up all the time. To top it all off, guides and tutorials don&#39;t build up your knowledge to an adequate level. They leave you &lt;a href=&quot;https://dev.to/dglsparsons/the-drug-of-online-tutorials-2od4&quot;&gt;stumbling in the dark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But why is this? What makes all these tutorials fall short? Why can&#39;t you follow a guide and learn everything you need to get started?&lt;/p&gt;
&lt;p&gt;Most tutorials, guides or courses fall short for at least one of three reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They promote misinformation, guiding you down an opinionated or flawed path.&lt;/li&gt;
&lt;li&gt;They fail to account for, and teach, the huge amount of knowledge you need beforehand.&lt;/li&gt;
&lt;li&gt;They focus on low-level details, rather than overarching concepts and their rationale.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here, I will examine each of these three flaws, in turn, arguing how they all undermine successful learning. I&#39;ll then argue for a simplified approach to learning. Instead, we should be focussing on concepts and experiences over implementation.&lt;/p&gt;
&lt;h2&gt;A sea of (mis)information&lt;/h2&gt;
&lt;p&gt;The internet is an invaluable tool for any type of learning. The amount of information readily available is second to none.&lt;/p&gt;
&lt;p&gt;However, not all information is created equally. On the internet, love it or loathe it, anyone can create content. This leads to a divide. How do you know what content is worth looking at? How do you know who&#39;s opinions are trustworthy?&lt;/p&gt;
&lt;p&gt;Studies have shown that bloggers are trusted. Trusted a scary amount. They are more trusted than &lt;a href=&quot;https://moreniche.com/blog/bloggers-are-third-most-trusted-by-consumers/&quot;&gt;celebrities, social media contacts and journalists&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’re a blogger, you’re the third most trusted source of information... behind only friends and family.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Should we trust these people?&lt;/p&gt;
&lt;p&gt;The problem is the low barrier to entry. It&#39;s both a strength and weakness of online material. Anyone can create a blog or video claiming they know everything there is to know about programming. As long as someone is presenting with confidence it is impossible to tell an expert from a beginner.&lt;/p&gt;
&lt;p&gt;We live in a society fuelled by views, likes, comments and social media interaction. In this world, it is not the most insightful information that gets the most attention. It is the content with the most-clickbaity title. The author who writes a compelling story, or the person who promises you a quick-win tutorial.&lt;/p&gt;
&lt;p&gt;As a result, the most promoted information can often be the least valuable. People are more likely to create content that will get viewed, rather than content that will teach you everything you need to know.&lt;/p&gt;
&lt;h2&gt;The HUGE amount of knowledge&lt;/h2&gt;
&lt;p&gt;Have you ever heard the interview question: &amp;quot;What happens when you type &lt;a href=&quot;http://google.com/&quot;&gt;google.com&lt;/a&gt; into your browser&#39;s address bar and press enter?&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/search.jpg&quot; alt=&quot;Browser search&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you haven&#39;t, take a moment to think. It&#39;s a big question. How deep can your knowledge of it go?&lt;/p&gt;
&lt;p&gt;It seems a trivial task. Typing an address or search term into a browser is something we all do hundreds of times every day. But the explanation is anything but trivial. People have tried to create &lt;a href=&quot;https://github.com/alex/what-happens-when&quot;&gt;comprehensive guides&lt;/a&gt; answering this question. Even then, they don&#39;t cover everything. It depends on what operating system you&#39;re using. It depends on what browser you&#39;re using. It depends on what keyboard you are using. It depends on what motherboard your computer has. It depends on what monitor you are using. It depends on how your internet is set up. It depends on where in the world you are... it depends on... well, everything.&lt;/p&gt;
&lt;p&gt;There is a crazy amount of detail involved in answering this straightforward question. This highlights how complicated programming can be. An overwhelming amount is going on. If you&#39;re just starting out learning, this puzzle can be too much to handle. Without a knowledgeable guide to show you what to learn, it&#39;s tricky to know where to start. It&#39;s a puzzle you need to break apart, but have no idea how.&lt;/p&gt;
&lt;h2&gt;The lack of concept-driven learning&lt;/h2&gt;
&lt;p&gt;Despite the huge amount of complexity in the previous example, it&#39;s important to remember one thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nobody knows everything.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most programmers are capable of using the internet as a black-box without dealing with all its complexities. We do not worry about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_protocol_suite&quot;&gt;TCP/IP model&lt;/a&gt;. We do not worry about lost packets, signal-to-noise ratio along wires, or routing connections to servers. We don&#39;t worry about keyboard hardware, operating systems, or motherboards. This is because these are concepts. Concepts that we can abstract away.&lt;/p&gt;
&lt;p&gt;The problem, though, is that beginners often bump up against all these concepts. It&#39;s overwhelming how many there are, and how they are often assumed knowledge. For example, before building and hosting a website there is a level of understanding you need to have.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is a website?&lt;/li&gt;
&lt;li&gt;What is a webpage?&lt;/li&gt;
&lt;li&gt;Why do we have HTML / css / javascript?&lt;/li&gt;
&lt;li&gt;What is the DOM?&lt;/li&gt;
&lt;li&gt;What is a browser API?&lt;/li&gt;
&lt;li&gt;What is a webserver?&lt;/li&gt;
&lt;li&gt;How does a browser communicate with a webserver?&lt;/li&gt;
&lt;li&gt;How does DNS work?&lt;/li&gt;
&lt;li&gt;What is a function, module, page, view?&lt;/li&gt;
&lt;li&gt;What is a package manager?&lt;/li&gt;
&lt;li&gt;What is a package?&lt;/li&gt;
&lt;li&gt;What is a dependency?&lt;/li&gt;
&lt;li&gt;What is accessibility?&lt;/li&gt;
&lt;li&gt;What is a build?&lt;/li&gt;
&lt;li&gt;What is deployment?&lt;/li&gt;
&lt;li&gt;What is a version?&lt;/li&gt;
&lt;li&gt;What is a cache?&lt;/li&gt;
&lt;li&gt;How does a browser store data?&lt;/li&gt;
&lt;li&gt;What is a framework?
...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list goes on. Most tutorials fail to recognise this massive amount of knowledge you need beforehand. Instead, they jump in at the deep end. &amp;quot;Install this npm package&amp;quot;, &amp;quot;run this command&amp;quot;. Or worse, &amp;quot;copy this code&amp;quot;, &amp;quot;follow me&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/confused.png&quot; alt=&quot;Confused&quot;&gt;&lt;/p&gt;
&lt;p&gt;Instead, there is a need to focus on what concepts and abstractions we use and rely on as programmers. Rather than teaching how to build a website, we need to give insight into our terminology and culture. We need to focus on &lt;em&gt;why&lt;/em&gt; we do things. What each abstraction is for, what is its purpose. As a beginner, programming is overwhelming because nobody explains the concepts you need. There is no source for this information. Instead, everyone assumes you can pick up concepts as you go along. Or, they assume you understand enough beforehand.&lt;/p&gt;
&lt;p&gt;This is one of the key reasons a &#39;tutorial hell&#39; exists. It&#39;s very simple to watch someone build something. But, without understanding the concepts they use as building blocks, it is impossible to replicate.&lt;/p&gt;
&lt;p&gt;Even experienced programmers get tripped up by this.&lt;/p&gt;
&lt;p&gt;I was recently chatting with a friend who moved jobs. After his first few days, he told me his head felt like mush. He had so much to learn. After a bit of discussion, I realised the problem was that he was learning three things at once:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;He had to learn a whole new technology stack.&lt;/li&gt;
&lt;li&gt;He had to learn the ways of working within the company.&lt;/li&gt;
&lt;li&gt;He had to learn the domain of the companies product.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even for someone with a wealth of experience, learning those three things all at once is daunting. But he is bringing to the table years and years of experience. Contrast this to a complete beginner, and no wonder it&#39;s so difficult!&lt;/p&gt;
&lt;h2&gt;How do you avoid these problems?&lt;/h2&gt;
&lt;p&gt;I wish I had an easy solution to all these problems. I wish there was an easy way to get trustworthy information. To inform people of the core concepts that power programmers everywhere. To tackle the huge amount of knowledge by teaching you what you need to know without getting weighed down by complexity. The solution is not an easy one. There are, however, two solutions that spring to my mind.&lt;/p&gt;
&lt;p&gt;Number 1: Get a mentor. An experienced programmer is a powerful ally to have. They can point you in the right direction with your learning. They can answer your questions. They can teach you concepts that you don&#39;t understand. With the current climate of the world, more and more people are available on the internet. It&#39;s easy to ask for support and there are huge numbers of people eager to help out.&lt;/p&gt;
&lt;p&gt;Number 2: A useful tutorial course. Over time, I&#39;ve stumbled across a few resources that cement the logic you need to succeed. However, I&#39;ve always found these few and far between. I&#39;m sure there are lots out there because there are so many courses, blogs and guides are available. I don&#39;t know where the trustworthy, concept-first courses are though. Are people interested in a concept-first style tutorial? Have you come across any good resources for this? If so, please share these useful resources!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Do people share my same criticisms of tutorials and guides? Do you share the feeling that it&#39;s overwhelming at times? Please let me know - and let me know if I can help in any way. If you&#39;re more experienced, please share any resources you have that helped you.&lt;/em&gt;&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Avoid COGNITIVE OVERLOAD when programming in 4 simple ways</title>
		<link href="https://dgls.dev/posts/avoid-cognitive-overload/"/>
		<updated>2020-10-26T09:51:00+00:00</updated>
		<id>https://dgls.dev/posts/avoid-cognitive-overload/</id>
		<content type="html">
		  &lt;p&gt;Programming can be an arduous activity. You have to remember what you are doing. Remember the context and inner workings of an application or system. Remember the syntax and building blocks of the language you are working in. Remember locations of code to come back to and tweak later. Remember what steps you have to take to achieve a goal. And you often have to do all this while learning a new codebase, technology, language and domain.&lt;/p&gt;
&lt;p&gt;All these things you have to remember fight for space inside your brain. You can feel lost, overwhelmed, or feel like your brain has turned to mush. Your brain has too much to remember, and too much to process all at once. As a result, it starts to drop the ball. Making decisions becomes a difficult task as you overthink, over-analyze and over-complicate &lt;a href=&quot;https://www.psychologytoday.com/gb/blog/in-practice/201810/seven-thinking-errors-contribute-mental-overload&quot;&gt;everything&lt;/a&gt;. You forget what you should be doing and forget what you should be doing later. This is COGNITIVE OVERLOAD.&lt;/p&gt;
&lt;p&gt;Our brains aren&#39;t designed to store and process all this information all the &lt;a href=&quot;https://www.gamasutra.com/view/feature/190891/programmer_interrupted.php?print=1&quot;&gt;time&lt;/a&gt;. Luckily, there are four simple steps you can take to reduce the amount of strain on your brain.&lt;/p&gt;
&lt;h2&gt;1. ✍️ Write Everything Down&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/writing.jpg&quot; alt=&quot;Writing&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first thing I want to talk about is &#39;Getting Things Done&#39;. This is a productivity methodology introduced by &lt;a href=&quot;https://gettingthingsdone.com/&quot;&gt;David Allen&lt;/a&gt;. His book tackles a common problem: often we have many different things in our lives to track and organise. These commitments can range from work, friends, hobbies or family. Our commitments are usually only stored within our head and as a result, are badly managed.&lt;/p&gt;
&lt;p&gt;The most important idea is to realise that our brains are not a good place for storing information. Instead, we should be using our brains as a source of ideas. A place for creative thinking.&lt;/p&gt;
&lt;p&gt;The best way to do this is by removing anything our brains need to remember.&lt;/p&gt;
&lt;p&gt;The solution is super simple: write everything down. We can write down how an application works. We can write down the basic syntax rules for a programming language. We can write down a to-do list of all the things we need to remember.&lt;/p&gt;
&lt;p&gt;Every single piece of information written down is one less thing to think about. One less thing our brains have to keep. This reduces the cognitive load by simply removing information we can keep elsewhere.&lt;/p&gt;
&lt;h2&gt;2. 🔖 Bookmark Locations To Come Back To&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/bookmarks.jpg&quot; alt=&quot;Bookmarks&quot;&gt;&lt;/p&gt;
&lt;p&gt;Have you ever gone to make a specific change when programming and recognised a piece of tech debt or a bug lurking? And then, by the time you&#39;ve jumped down a rabbit hole of fixing things up you&#39;ve forgotten why you were even there in the first place?&lt;/p&gt;
&lt;p&gt;Every single distraction we get when programming is one more thing to remember later. Yet, fixing bugs, improving code quality and cleaning up tech debt are all important.&lt;/p&gt;
&lt;p&gt;Again, the solution here is simple: every time we want to diverge from the task we started on, we need to make a note. Attempting to remember does not work as this just adds to the cognitive load. Even more so because you can get distracted from a distraction. You can fix tech debt and get distracted by a bug. Or when you fix one problem, realise that there&#39;s another you didn&#39;t initially spot.&lt;/p&gt;
&lt;p&gt;I like to think of this as a stack of plates we are balancing, all of different sizes and shapes. Trying to keep one balanced isn&#39;t a problem. Getting diverted adds another plate to the top of the pile though. As we get diverted more and more the stack of plates becomes heavy,  difficult to balance, and increasingly precarious. If instead, we were to put each plate down as we picked up a new one (by writing it down), we can just keep a single plate balanced. The cognitive load here drops. We can instead use our brain to focus on the task at hand, rather than on balancing plates.&lt;/p&gt;
&lt;h2&gt;3. 🕑 Spend Time Away&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/relax.jpg&quot; alt=&quot;Time Away&quot;&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s a widely held theory that sleep serves a clear purpose: it helps our brains decongest. Sleep helps store important memories and  things you&#39;ve learned. It gets rid of unimportant memories. It allows our brains to sort through complicated thoughts and &lt;a href=&quot;https://www.healthline.com/health/why-do-we-dream&quot;&gt;feelings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our brains are complicated devices. It&#39;s rarely clear how they work or what they are doing, and they are not well understood.&lt;/p&gt;
&lt;p&gt;But, this idea that sleep helps decongest our brains gives a powerful insight. Our brains are capable of doing &lt;em&gt;background processing&lt;/em&gt;. We don&#39;t have to actively think on a problem for our brains to digest it. Did you ever wonder why people have some of their best ideas in the shower, or when they are out for a run? This explains why.&lt;/p&gt;
&lt;p&gt;Furthermore, it&#39;s important we tap into this background processing the brain can offer. Why bother banging your head against a wall over and over, when taking a break can allow our brain to figure things out?&lt;/p&gt;
&lt;h2&gt;4. 🗣️ Talk To People&lt;/h2&gt;
&lt;p&gt;Have you ever heard of &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck debugging&lt;/a&gt;? The idea comes from a book written by &lt;a href=&quot;https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/&quot;&gt;Hunt and Thomas&lt;/a&gt;. The idea is that a programmer would explain his or her code, often line-by-line to a rubber duck. In forcing his/herself into the perspective of a teacher and explaining what the code should do, and actually does, problems are often spotted.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/duck.jpg&quot; alt=&quot;Rubber Duck&quot;&gt;&lt;/p&gt;
&lt;p&gt;The idea used a rubber duck as this is an &#39;inanimate object&#39;, and prevents disrupting anyone else. However, this neglects all the benefits that talking to another person can provide. They can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ask questions that make you consider your approach&lt;/li&gt;
&lt;li&gt;provide suggestions on how you can tackle a problem&lt;/li&gt;
&lt;li&gt;suggest alternative solutions&lt;/li&gt;
&lt;li&gt;provide a wider range of perspectives on the matter&lt;/li&gt;
&lt;li&gt;often, provide more expertise on a subject area&lt;/li&gt;
&lt;li&gt;provide a more intricate knowledge of existing solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, even more than this, the ability to share knowledge with a teammate is a valuable skill. By having two people understand a problem the brainpower used to solve a problem doubles. This can lead to better solutions (it&#39;s no wonder &lt;a href=&quot;https://en.wikipedia.org/wiki/Pair_programming&quot;&gt;pair programming&lt;/a&gt; exists).  Sharing, really is caring.&lt;/p&gt;
&lt;h2&gt;✅ To Conclude&lt;/h2&gt;
&lt;p&gt;Programming is a complicated task. Programmers often have to hold many things in their memory. And yet, they are expected to simultaneously come up with creative solutions to complicated problems. This leads to a huge amount of cognitive load.&lt;/p&gt;
&lt;p&gt;The solution is simple though. We need to remove as much of this load as possible, allowing the brain to focus on the tasks at hand. We can achieve this in 4 simple ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By writing down everything we learn.&lt;/li&gt;
&lt;li&gt;By bookmarking anything that we need to come back to.&lt;/li&gt;
&lt;li&gt;By allowing our brains to unclog by spending time away.&lt;/li&gt;
&lt;li&gt;By changing perspective and sharing with others.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Do you think there is anything I have missed? Do you use any of these methods? Please comment, or let me know.&lt;/em&gt;&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Why EFFECTIVE COMMUNICATION is the key skill for being an awesome programmer</title>
		<link href="https://dgls.dev/posts/communication/"/>
		<updated>2020-11-03T12:20:00+00:00</updated>
		<id>https://dgls.dev/posts/communication/</id>
		<content type="html">
		  &lt;p&gt;Programming is all about communication. We communicate with computers to tell them what we want them to do. We instruct them to carry out tasks to the finest degree of accuracy. We communicate with our peers, sharing ideas and technology. We communicate with business owners, gathering requirements and context on problems. And yet, communication is a difficult thing to get right.&lt;/p&gt;
&lt;p&gt;Have you ever tried to write a blog, teach someone about a topic, or write an email on a difficult topic?&lt;/p&gt;
&lt;p&gt;If you have, then you will know how challenging precise communication can be.&lt;/p&gt;
&lt;h2&gt;🗣️ Why is communication so hard&lt;/h2&gt;
&lt;p&gt;When programming, all our communication immediately becomes at least twice as difficult. We write programs that have to be understood by the computer so they can run. But, they also have to be understood by future readers: people editing or maintaining them. They also have to capture exact requirements with little or no room for error. These requirements typically come from communication with non-programmers.&lt;/p&gt;
&lt;p&gt;At the very least this means all programs are acting on around four levels of communication:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;🗣️ A non-technical individual communicating to a developer.&lt;/li&gt;
&lt;li&gt;💻 A developer communicating his intent to an application.&lt;/li&gt;
&lt;li&gt;🤖 The application running and communicating to the computer.&lt;/li&gt;
&lt;li&gt;🐛 Another developer looking to extend or debug the application.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bugs, misunderstandings and issues in translation can occur at any, or all, of these layers. Writing software becomes a game of Chinese whispers.&lt;/p&gt;
&lt;h2&gt;🙊 Chinese whispers&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/whisper.jpg&quot; alt=&quot;Whispering&quot;&gt;&lt;/p&gt;
&lt;p&gt;This game becomes even bigger and more error-prone as you scale up teams, or have open-source contributors. The more programmers working on a codebase, the more miscommunication and misunderstanding there can be.&lt;/p&gt;
&lt;p&gt;This communication is even more challenging because of the huge variation in what programs can do. A web application is concerned with attractively arranging pixels on a screen. A finance application might need complex calculations to be exact to the penny/cent. A device driver might care about manipulating bespoke hardware to certain voltages. The range is huge, and this complexity is part of the reason programming can be so overwhelming.&lt;/p&gt;
&lt;h2&gt;🤷 Ambiguity&lt;/h2&gt;
&lt;p&gt;Communication is also inherently hard because of how language works. In everyday speech, there are multiple ways to interpret any sentence. These ways are often dependent on context or our environments. And then, there are multiple ways to represent everything as code. There&#39;s an old joke that illustrates this well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/milk.jpg&quot; alt=&quot;Milk&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A software engineer gets sent to the shops by his wife.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;She tells him &amp;quot;Go and get a pint of milk, and if they have eggs get six&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The engineer disappears and returns an hour later with six pints of milk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“Why on earth did you get six pints of milk!?” His wife asks, furious.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;He confidently replies &amp;quot;they had eggs!&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;💥 So what can we do?&lt;/h2&gt;
&lt;p&gt;We&#39;ve identified that communication can act as Chinese whispers. Language can be ambiguous, and we have many different points of communication in our day-to-day working. As a result, the quality of any communication is of critical importance. An individual who is capable of communicating effectively with non-technical people, other programmers and with a computer is invaluable.&lt;/p&gt;
&lt;p&gt;It&#39;s important to remember how we communicate. When thinking of communication my mind always jumps straight to two people talking, or a board room full of people wearing suits.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/meeting.jpg&quot; alt=&quot;Meeting&quot;&gt;&lt;/p&gt;
&lt;p&gt;However, this is rarely the case. We communicate far more frequently in our work, and talking isn&#39;t the only way we communicate. Talking often isn&#39;t even the best way to communicate.&lt;/p&gt;
&lt;p&gt;There are four topics we communicate about and four ways we usually communicate these:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Code - we communicate through reading and writing code&lt;/li&gt;
&lt;li&gt;Architecture - typically represented both in code and in diagrams.&lt;/li&gt;
&lt;li&gt;Requirements - these are usually gathered through conversations or user stories.&lt;/li&gt;
&lt;li&gt;Deadlines - usually through conversations or calendar events.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For code. Having clear code, that is easy to understand and digest makes life much easier. It frees up our brains to solve problems, rather than focusing on the minutiae of how an application works. Just like Donald Knuth, I believe that &amp;quot;programs are meant to be read by humans and only incidentally for computers to execute&amp;quot;. When writing code, optimising for readability should &lt;em&gt;always&lt;/em&gt; be our main focus. A well-structured, well-written codebase is far less prone to misinterpretation. Far easier to digest, and much more enjoyable to work with.&lt;/p&gt;
&lt;p&gt;For architecture, we must clearly define and delineate any systems. Everything should have a clear purpose and a single responsibility. It should also be clear how these systems communicate. This should all be easy to digest (via diagrams, sensible naming, clear purpose and sensible code structure).&lt;/p&gt;
&lt;p&gt;For requirements, we must extract every degree of detail possible. Clarify on everything, even points that seem obvious. Make sure they are all written down and that a common understanding is reached across the team.&lt;/p&gt;
&lt;p&gt;Finally, deadlines. You might think these are unambiguous: &amp;quot;have X done by Y date&amp;quot;. It seems straightforward, but remember that many &amp;quot;Agile&amp;quot; teams have to define what &#39;done&#39; really means. Does it mean code complete? Tested? Deployed? Handed over to a different team? All the above and defects fixed?&lt;/p&gt;
&lt;h2&gt;✨ In Conclusion&lt;/h2&gt;
&lt;p&gt;Communication is challenging. Everyday language is ambiguous: we can often interpret very different meanings from the same sentence. As teams grow, our points of communication grow with them, and, even in small teams, several layers of communication take place. Mis-interpretation or a poor understanding can sneak in at any of these layers.&lt;/p&gt;
&lt;p&gt;As a result, we have to focus continually on communicating effectively. Having good quality code that is clear in purpose and easy to read and understand is essential. We need to keep our systems organised as neatly as possible, with clear diagrams and purpose. Requirements and deadlines need constant questioning, and every assumption challenged. Through doing all this, we can communicate more effectively, and be awesome programmers as a result.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Write better code and be a better programmer by NEVER USING ELSE statements</title>
		<link href="https://dgls.dev/posts/else-statement/"/>
		<updated>2020-11-10T13:20:00+00:00</updated>
		<id>https://dgls.dev/posts/else-statement/</id>
		<content type="html">
		  &lt;p&gt;I&#39;ve been a professional programmer for the last several years. During this time I&#39;ve risen rapidly through the ranks. I started as an intern, but I&#39;m now the Lead Engineer responsible for a suite of products that serve over 160,000 people in over 140 different countries.&lt;/p&gt;
&lt;p&gt;Recently, I took a look back across all the code I&#39;ve written during these years (that I still have access to). I&#39;ve written production code in a huge variety of languages, through Haskell, Scala, Go, Python, Java or Javascript. Across all these, I noticed one significant trend: I pretty much never use the ELSE statement.&lt;/p&gt;
&lt;p&gt;I realised there&#39;s a clear rationale behind my aversion to else statements though. I believe that they shouldn&#39;t be used, and should be treated as a code smell instead. There are two reasons I think this: else statements break the line-of-sight rule, and they always lack context. I&#39;ll explain these two points in detail before showing how you can avoid using else statements.&lt;/p&gt;
&lt;h2&gt;Line of Sight rule&lt;/h2&gt;
&lt;p&gt;I&#39;m a firm believer that code should be optimised to be read by people in the future, rather than being optimised for being executed by machines. In this, I echo Donald Knuth&#39;s sentiment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Programs are meant to be read by humans and only incidentally for computers to execute.” - Donald Knuth, The Art of Computer Programming.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem is the ability to read code is subjective: it&#39;s hard to define exactly what makes code readable. One rule that seeks to clarify this though, is the line-of-sight rule. This is a popular rule in the Go community. &lt;a href=&quot;https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88&quot;&gt;Mat Ryer&lt;/a&gt; defines it concisely in his talk and article. Simply stated, this is the idea that the ‘happy path&#39; in code should be indented as little as possible.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/happy-path.png&quot; alt=&quot;Happy path&quot;&gt;&lt;/p&gt;
&lt;p&gt;Contrastingly, any error handling or special case code should be indented further.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/special-case.png&quot; alt=&quot;Special case&quot;&gt;&lt;/p&gt;
&lt;p&gt;Any code that follows this has a unique property: scanning the least indented code is sufficient to understand what any piece of code is doing. Scanning the more indented code shows all the special cases and errors that can occur. This makes it super easy to understand at just a glance.&lt;/p&gt;
&lt;p&gt;So how do else statements relate to this?&lt;/p&gt;
&lt;p&gt;Else statements are problematic as they force code down a level of indentation. It suddenly becomes unclear what code relates to a ‘happy path&#39;, and what a special case really is.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/unclear-else.png&quot; alt=&quot;Unclear&quot;&gt;&lt;/p&gt;
&lt;p&gt;This lack of clarity makes the code harder to scan through, and hurts the readability.&lt;/p&gt;
&lt;h2&gt;Lack of Context&lt;/h2&gt;
&lt;p&gt;The ability to quickly and efficiently scan code is super important. Digesting small sections of code in isolation is a key part of this. We don&#39;t want to always have to read every line of code to understand a small part of a codebase.&lt;/p&gt;
&lt;p&gt;Else statements make this harder as they space out the &lt;code&gt;if&lt;/code&gt; condition and the code that is affected by it. This is best explained through two examples. First, can you tell what happens when these three lines of code are run?&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; myVariable &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; “”&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully, this is fairly obvious. Let&#39;s take a contrasting example though:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; “”&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that without the &lt;code&gt;if&lt;/code&gt; statement, we can&#39;t determine what this is meant to be doing. Why would it return an empty string? Is this an error, or the ‘normal&#39; behaviour? This code instead relies on us remembering, and having read, the earlier context. This doesn&#39;t matter much when the statements are small, but if there&#39;s complicated logic within the &lt;code&gt;if { … }&lt;/code&gt; block or we are scanning quickly, then the separation of context from code can hurt readability massively. It hurts even more when if/else statements are nested, or there are multiple of them in one function (which if statement is this else for?).&lt;/p&gt;
&lt;h2&gt;How to remove else statements?&lt;/h2&gt;
&lt;p&gt;Now we&#39;ve agreed that else statements are rubbish. But that&#39;s not much help by itself. The real trick is how to avoid them. Thankfully, there are two simple ways to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inverting the &lt;code&gt;if&lt;/code&gt; condition and returning early, and,&lt;/li&gt;
&lt;li&gt;Creating helper functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Inverting the condition&lt;/h2&gt;
&lt;p&gt;This is the most common instance I come across. It can take two forms too - one where the &lt;code&gt;else&lt;/code&gt; is implicit, one where it is explicit. The explicit version looks like the following:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; something&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; something&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; err&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; errors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;something isn&#39;t ok&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The implicit is similar, but without containing an &lt;code&gt;else&lt;/code&gt; statement per se. Instead, the &lt;code&gt;else&lt;/code&gt; is implied by simply dropping off the end of the function (this one is more common in Python or JavaScript, where &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; are returned if nothing is explicitly stated).&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;something&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; something&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this isn&#39;t super clear what the full extent of the behaviour is. Without reading the whole function, the return values aren&#39;t clear.&lt;/p&gt;
&lt;p&gt;By simply inverting the &lt;code&gt;if&lt;/code&gt; condition, we can solve all these problems though.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;something&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// return or throw error&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; something&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now scan this function and clearly see the indented error condition and normal flow, satisfying the line-of-sight rule. The behaviour is fully explicit, and we have no separation of context. This is much better.&lt;/p&gt;
&lt;h2&gt;Helper Functions&lt;/h2&gt;
&lt;p&gt;We also get else statements that don&#39;t directly result in a &lt;code&gt;return&lt;/code&gt;. This is usually through some special-case logic that isn&#39;t isolated properly. For example&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; charities&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;country &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tier &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      charities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCharitiesByCampaignCountryAndTier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;campaign&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tier&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      charities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCharitiesByCampaignAndCountry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;campaign&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; country&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    charities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCharitiesByCampaign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;campaign&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// do something with charities&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The readability of this can be improved by pulling the charity-getting logic into its own function. This then lets the special cases be handled appropriately, and return early. By inverting some of the if statements, this can be improved further.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCharities&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;campaign&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;country &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCharitiesByCampaign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;campaign&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tier &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCharitiesByCampaignAndCountry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;campaign&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; country&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCharitiesByCampaignCountryAndTier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;campaign&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tier&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This helper function neatly encapsulates all the logic we&#39;d need, removes the need for any else statements, and does a much better job of keeping the happy-path code to the left. This is much easier to scan through, and much more readable as a result.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Else statements are a weird code smell. They harm the readability of any code by forcing equal levels of indents for error handling and for happy paths. They also have the unique ability to separate code from the logic that affects it. They are easy to avoid through the two techniques of returning early and splitting logic into helper functions. As a result, they are unnecessary. You can write better code and be a better programmer by never using them.&lt;/p&gt;
&lt;p&gt;Some caveats (to stop the pedants).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In SQL CASE WHEN … ELSE … isn&#39;t really avoidable.&lt;/li&gt;
&lt;li&gt;In Scala, implicit returns (avoiding return statements for referential transparency) means you have to use them - you don&#39;t really have the ability to &#39;return early&#39;.&lt;/li&gt;
&lt;li&gt;Ternary operators are fine.&lt;/li&gt;
&lt;li&gt;In python, the ternary operator uses &lt;code&gt;else&lt;/code&gt;. This is also fine.&lt;/li&gt;
&lt;/ul&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>How to write IMMUTABLE code and never get stuck debugging again</title>
		<link href="https://dgls.dev/posts/immutability/"/>
		<updated>2020-11-17T15:20:00+00:00</updated>
		<id>https://dgls.dev/posts/immutability/</id>
		<content type="html">
		  &lt;p&gt;I&#39;ve written production code in a variety of different languages throughout my career, including Haskell, Scala, Go, Python, Java or JavaScript. While each language has its own clear benefits, working as a polyglot across a range of different paradigms has changed the way I write code. Certain skills and concepts are transferable regardless of the language being written. I believe immutability is one of these key concepts. By writing immutable code it is possible to make programs easier to reason about, easier to write and easier to debug.&lt;/p&gt;
&lt;p&gt;Here, we’ll look at three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how walruses eating cheese can explain how immutability works,&lt;/li&gt;
&lt;li&gt;why you should care, and&lt;/li&gt;
&lt;li&gt;why the counterarguments against immutable code aren’t worth considering.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is immutability?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“unchanging over time or unable to be changed.” - Oxford Languages definition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Immutability is the idea that once an object or variable has been created, its value should never change or be updated by anything. For objects or classes, this also includes any fields; literally, nothing should change! The object is effectively read-only.&lt;/p&gt;
&lt;p&gt;Writing code in this style requires a mindset shift at times though. The first time I came across the idea, it made absolutely no sense to me and seemed insane. I was confused and wanted to immediately unpick it all, writing it in a way I was familiar with. Gary Bernhardt, in his &lt;a href=&quot;https://www.destroyallsoftware.com/talks/boundaries&quot;&gt;talk on boundaries&lt;/a&gt;, gives a fantastic example of why it feels so wrong.&lt;/p&gt;
&lt;p&gt;He talks about feeding walruses cheese.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/walrus.jpg&quot; alt=&quot;Walrus&quot;&gt;&lt;/p&gt;
&lt;p&gt;In a mutable version, we might instruct each walrus to eat some cheese. This cheese then gets added to the contents of their stomach. Makes a lot of sense, right?&lt;/p&gt;
&lt;p&gt;In an immutable version, we have to perform a mind-bending operation. To feed the walruses we would have to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a brand new stomach that’s the same as the old stomach, but with some cheese in it.&lt;/li&gt;
&lt;li&gt;Then, create a new walrus that’s the same as the old walrus, except, with the stomach replaced.&lt;/li&gt;
&lt;li&gt;Then, throw away all the old walrus.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At first glance, this sounds bonkers but stay with me - let’s look at what makes writing code like this worthwhile.&lt;/p&gt;
&lt;h2&gt;How does it prevent pain when debugging?&lt;/h2&gt;
&lt;p&gt;Have you ever encountered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undefined is not a function&lt;/code&gt; in JavaScript?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NullPointerException&lt;/code&gt;s in Java?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SegFault&lt;/code&gt; in C/C++?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;panic&lt;/code&gt; in Go?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NoneType has no attribute foo&lt;/code&gt; in Python?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’ve worked in any of these languages, then chances are you probably have. The thing is, all of these errors are caused by the same thing: &lt;strong&gt;missing, or null, data.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Missing data and null values are definitely among the most difficult types of bugs to track down and fix. I’ve spent countless hours in the past sifting through JavaScript code trying to figure out why the value I thought should be there, wasn’t. Why my application suddenly crashed when everything seemed to be going fine. Sir Tony Hoare even describes null as &lt;a href=&quot;https://qconlondon.com/london-2009/qconlondon.com/london-2009/speaker/Tony+Hoare.html&quot;&gt;“The Billion Dollar Mistake”&lt;/a&gt; because of the countless bugs, security vulnerabilities and crashes that have resulted from it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let’s just agree: nulls can be evil.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The reason these bugs are so hard to hunt down and to fix is that the effect (the exception) is far away from the cause (the introduction of null). Actually throwing a null pointer error happens some arbitrary amount of time after we introduce a null, and we get &lt;code&gt;undefined&lt;/code&gt; errors accessing a property miles away from where we thought the property was set. Debugging becomes a case of reading carefully back through code until we find the cause.&lt;/p&gt;
&lt;p&gt;The more state changes that happen in code, the more places these bugs can be introduced. Instead, we can attempt to reduce the surface area of any code. The fewer mutations in a codebase, the less surface area there is for bugs. This leads to fewer bugs.&lt;/p&gt;
&lt;p&gt;If you only ever set a value once, there’s only one place that value can be faulty. If you make changes to an object as it gets passed around, any one of those places could introduce potential issues. If one of our walruses is faulty, we know it can only have happened when we made the latest walrus, complete with the new stomach. It can’t be an issue with an earlier walrus - they are long gone.&lt;/p&gt;
&lt;p&gt;So really, immutability, or, never changing a value, really saves us from getting stuck debugging.&lt;/p&gt;
&lt;h2&gt;Why performance isn’t a concern&lt;/h2&gt;
&lt;p&gt;Some eagle-eyed people might be thinking “those walruses earlier… isn’t throwing them all in the bin and making new ones pretty expensive? Won’t it make my code slow?”.&lt;/p&gt;
&lt;p&gt;The answer isn’t simple.&lt;/p&gt;
&lt;p&gt;You’re right in saying that throwing away walruses all the time isn’t totally necessary, and it can make things the tiniest amount slower sometimes. The keyword being sometimes here though. Sometimes compilers are clever enough to optimise this behaviour with something more efficient. Some languages even &lt;a href=&quot;https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html&quot;&gt;prefer immutability by default&lt;/a&gt;. Immutability also has great benefits when it comes to multi-threading or parallelisation, as it allows lock-free sharing, knowing that values &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/171253/does-immutability-entirely-eliminate-the-need-for-locks-in-multi-processor-progr&quot;&gt;won’t be changed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Despite all this, even if creating new walruses is slower in the language you use, the cost of allocating a new object is almost certainly minuscule compared to anything else within an application. Unless you are benchmarking and actively measuring performance, then you almost certainly shouldn’t care.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Immutability is a powerful tool when programming. It allows us to write code that is easier to debug and reason about. It requires a bit of a mindset shift, but in my experience, it’s definitely worth making the mental leap.&lt;/p&gt;
&lt;p&gt;Give it a go, and let me know what you think :).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Looking for other ways to improve the clarity of your code? Why not check out my &lt;a href=&quot;https://dgls.dev/posts/else-statement/&quot;&gt;post on never using else statements&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Enjoyed this post? Want to share your thoughts on the matter? Found this article helpful? Disagree with me? Let me know by &lt;a href=&quot;https://dgls.dev/posts/immutability/twitter.com/dglsparsons&quot;&gt;messaging me on Twitter&lt;/a&gt;.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>3 amazing REACT HOOKS to keep your code organized neatly</title>
		<link href="https://dgls.dev/posts/3-amazing-react-hooks/"/>
		<updated>2020-11-25T09:00:00+00:00</updated>
		<id>https://dgls.dev/posts/3-amazing-react-hooks/</id>
		<content type="html">
		  &lt;p&gt;Hi, my name is Doug. I’ve been a developer for several years and now work as the Lead Engineer at Shamaazi. Over this period of time, I have written a lot of different UIs and learned a lot of ways to structure React code.&lt;/p&gt;
&lt;p&gt;This week I wanted to share my experience of the custom React Hooks I have found the most useful for producing websites in the cleanest, simplest way possible.&lt;/p&gt;
&lt;h2&gt;React Hooks&lt;/h2&gt;
&lt;p&gt;Hooks were first introduced to React in version 16.8, after being teased in 2018. There’s a fantastic guide introducing them on the &lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;React website&lt;/a&gt;. Simply stated, they are a way to write side-effects for functional UI components. This allows you to write parts of your UI as JavaScript functions, but still have the ability to manage state, call APIs, use storage, authenticate users, and so on.&lt;/p&gt;
&lt;p&gt;React provides some hooks out of the box (&lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useContext&lt;/code&gt; being the main three). On top of this, it allows you to compose your own higher-level hooks to separate out reusable logic. These custom hooks are what I’ll explore here. Here are the three I’ve found the most useful across the range of products we produce at Shamaazi.&lt;/p&gt;
&lt;h2&gt;Performing Asynchronous Actions&lt;/h2&gt;
&lt;p&gt;Most websites have to perform some form of asynchronous actions, whether it is loading data to display on the page or submitting data based on a user’s input and actions. It’s helpful to keep a track of the status of these asynchronous actions; is it currently loading? has it returned a result? Was there an error?&lt;/p&gt;
&lt;p&gt;We found a lot of our components started sharing a lot of similar code, either for fetching data on an initial load or for submitting data. This looked like the following:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setLoading&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setError&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setResult&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomeAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;setResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;loading&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;something broke&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All this loading and error logic can be pulled into a hook, making our interface much neater.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;MyTidyComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;doSomeAction&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;loading&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;something broke&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;useAsync&lt;/code&gt; hook is responsible for managing the loading, error and result states, removing the need for all this logic within the actual component. It also lets us reuse this throughout our application. This massively simplifies loading data onto a page.&lt;/p&gt;
&lt;p&gt;As a bonus, we found we also wanted the ability to execute an action later, rather than just when the component is created. This is useful for performing asynchronous actions based on a user&#39;s input; actions like submitting a form can use the same hook but pass a &lt;code&gt;false&lt;/code&gt; value as a second parameter. This indicates that they don’t want the action to be executed straight away.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; execute&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;submitSomeForm&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;form onSubmit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;execute&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;form&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also found that the hook sometimes caused a memory leak if a form submission navigated away from the component (e.g. a form might take you to the next page when it is submitted, but setting &lt;code&gt;loading&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; after you’ve been taken away from the form is a memory leak). We’ve handled this by tracking whether the hook is mounted on the page (tracked through &lt;code&gt;useRef&lt;/code&gt;). We’ll only update any state if the component is still present. This avoids any memory leaks.&lt;/p&gt;
&lt;p&gt;The full version of our &lt;code&gt;useAsync&lt;/code&gt; hook is here:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useEffect&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useCallback&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useRef &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;asyncFunction&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; immediate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setLoading&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setResult&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setError&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Track a reference to whether the useAsync is actually on a mounted component.&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// useEffect below returns a cleanup that sets this to false. Before setting&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// any state, we check if the cleanup has run. If it has, don&#39;t update the state.&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mounted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      mounted&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; execute &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mounted&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;setResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; r&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mounted&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mounted&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;setLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;asyncFunction&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;immediate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;execute&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; immediate&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; execute&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Updating LocalStorage or SessionStorage&lt;/h2&gt;
&lt;p&gt;As part of some of our products, we populate a &#39;shopping basket&#39;. This keeps a track of what a user has been doing. Sometimes, we want this to persist even if they navigate away from our site, refresh the page, or close the browser. To achieve this, we use a combination of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&quot;&gt;localStorage&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage&quot;&gt;sessionStorage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React itself doesn&#39;t provide any hooks for storing data in &lt;code&gt;localStorage&lt;/code&gt; or &lt;code&gt;sessionStorage&lt;/code&gt;, but we wanted a consistent experience with &lt;code&gt;useState&lt;/code&gt;. Realistically, it shouldn&#39;t be any harder to use &lt;code&gt;localStorage&lt;/code&gt; than it would be to use state normally.&lt;/p&gt;
&lt;p&gt;For example, we might want to use &lt;code&gt;localStorage&lt;/code&gt; to keep track of a user&#39;s input.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;storageComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setValue&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useLocalStorage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;storage_key&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;default_value&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our hooks to achieve this look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useStorage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialValue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; storage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Pass initial state function to useState so logic is only executed once&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;storedValue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setStoredValue&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; storage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; initialValue&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; initialValue&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// Update storage every time the value is changed&lt;/span&gt;&lt;br&gt;      storage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;storedValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;storedValue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; storage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;storedValue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setStoredValue&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useLocalStorage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useStorage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialValue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useSessionStorage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useStorage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialValue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sessionStorage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Authenticating users&lt;/h2&gt;
&lt;p&gt;A super common scenario we&#39;ve come across is having a bunch of components that all care whether a user is logged in. They often care about acting on the user too, through methods like &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;logout&lt;/code&gt; or &lt;code&gt;resetPassword&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to keep all these components in sync, we only want a single source of information about the current user. We could do this by having a component wrapping our entire application that manages a &lt;code&gt;user&lt;/code&gt; state, and passes any props down to where they are used for the &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;logout&lt;/code&gt; or &lt;code&gt;resetPassword&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;This quickly becomes messy though, with many components that don&#39;t really care being passed &lt;code&gt;user&lt;/code&gt; &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;logout&lt;/code&gt; props even if they don&#39;t use them themselves - only a child of theirs does.&lt;/p&gt;
&lt;p&gt;Luckily React provides the idea of a &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usecontext&quot;&gt;context&lt;/a&gt;. Allowing us to solve this problem.&lt;/p&gt;
&lt;p&gt;We can create an Auth context, and use a hook to get any information from it we want. We can also embed our auth API calls into this context.&lt;/p&gt;
&lt;p&gt;This would look like the following to use:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// In our top level App.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ProvideAuth &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hooks/useAuth&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ProvideAuth&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;RestOfApplication&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ProvideAuth&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// in a component that wants to use Auth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; useAuth &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hooks/useAuth&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; login&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; logout&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; resetPassword &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useAuth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This hook itself looks like the following:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useCallback&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; createContext &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; authContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Hook for child components to get the auth object and re-render when it changes.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Provider component that wraps components and makes useAuth() available&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ProvideAuth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; auth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useAuthProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;authContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Provider value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;auth&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;authContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Provide Auth hook that creates auth object and handles state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useAuthProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Get the logged in user when created&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLoggedInUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;logout&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;resetPassword&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    resetPassword&lt;br&gt;    login&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    logout&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    user&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has the additional benefit of keeping all of the authentication logic together. To change to a different auth provider, we would only have to change this one file.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;React provides some really powerful abstractions for creating code that is neatly organised and easy to read. Here, we’ve looked at the three React Hooks I’ve found the most useful: &lt;code&gt;useAsync&lt;/code&gt; for executing asynchronous actions either when a component is created or when a user performs an action, &lt;code&gt;useStorage&lt;/code&gt; for using &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; in the same way as &lt;code&gt;useState&lt;/code&gt;, and finally, &lt;code&gt;useAuth&lt;/code&gt; for managing users and authentication.&lt;/p&gt;
&lt;p&gt;These three hooks provide powerful abstractions that let you build React components in a simple manner.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Do you have any other custom React Hooks you find useful? Think I’ve missed any key ones? Please let me know.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Looking for other ways to keep your code organised? Check out my &lt;a href=&quot;https://dgls.dev/posts/immutability/&quot;&gt;article on writing IMMUTABLE code&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Enjoyed this post? Want to share your thoughts on the matter? Found this article helpful? Disagree with me? Let me know by &lt;a href=&quot;https://twitter.com/dglsparsons&quot;&gt;messaging me on Twitter&lt;/a&gt;.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Don&#39;t Write Utils: how to become an amazing programmer by naming carefully</title>
		<link href="https://dgls.dev/posts/avoid-utils/"/>
		<updated>2020-12-01T15:05:00+00:00</updated>
		<id>https://dgls.dev/posts/avoid-utils/</id>
		<content type="html">
		  &lt;p&gt;I hate the word ‘utility’. It says absolutely nothing. And yet, I come across it in so often when programming. It can take different guises too: ‘common’, ‘shared’, ‘lib’, ‘pkg’, ‘tools’, etc. These names can appear both as filenames or as directory names and drive me insane when they do.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;They can contain literally anything.&lt;/p&gt;
&lt;p&gt;And yet any code that ends up in these places has a clear purpose. It must be useful, otherwise, why would we write this code? I mean, some people do enjoy writing &lt;a href=&quot;https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition&quot;&gt;useless&lt;/a&gt; &lt;a href=&quot;http://www.muppetlabs.com/~breadbox/bf/&quot;&gt;code&lt;/a&gt;... but most of the time this isn’t the case. So why do utils crop up everywhere? How do we avoid this problem in our own code? Why does the name utils trigger me? Let me tell you my story.&lt;/p&gt;
&lt;h2&gt;The intent behind a bad name&lt;/h2&gt;
&lt;p&gt;When I first started my career in software engineering, I worked on a large project for NHS Digital. The project involved a variety of products that all shared libraries and packages. The source for these products and packages was a single monorepo, supported by around 30 developers. One ticket on the backlog that I picked up was to refactor a database client shared across these products.&lt;/p&gt;
&lt;p&gt;I began by researching the database clients the products currently used. I painstakingly mapped out an upgrade path for each product. I worked through all common scenarios for the database client. I deliberately designed the minimal interface this database client would need. In my eyes, it was going to be a work of art. Perfection.&lt;/p&gt;
&lt;p&gt;I set about building the database client and after endless weeks of meticulous upgrades, I finally had the finished product. My masterpiece. The code ran like clockwork.&lt;/p&gt;
&lt;h2&gt;The downfall&lt;/h2&gt;
&lt;p&gt;A year later I returned to work on the same codebase to find everything had become a mess. It felt like a rats nest to work in. There was no separation of concerns and every pull-request felt like you were wading through mud. I tried to figure out what the problem was. What had changed? Why had it all gone wrong? After a while, I realised it was entirely my fault.&lt;/p&gt;
&lt;p&gt;When I introduced the database client to the codebase, I’d put it into a &lt;code&gt;/shared/database/&lt;/code&gt; directory. Sounds sensible, right? It was going to be shared across all the products, so that would be the logical place to put it. My flaw though was in creating that &lt;code&gt;/shared/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;This shared directory triggered a rapid descent into chaos. Any code that could be conceived as potentially reusable was immediately placed into the shared directory without any consideration. More and more of the logic of each product ended up here, and less and less in the product’s directory. Changes risked breaking everything. It wasn’t long before some of the shared code became product-specific, or became a spiral of self-consuming code with no clear interface.&lt;/p&gt;
&lt;p&gt;Making a change to the shared code either meant changing every caller, overloading the behaviour, or making slightly different variations of the same code. Searching the codebase became near-impossible, duplication began to run rife and separation of concerns was non-existent. It was a nightmare.&lt;/p&gt;
&lt;h2&gt;So what did I learn from this?&lt;/h2&gt;
&lt;p&gt;In creating a shared directory, I’d opened the floodgates. The problem with the name ‘shared’ is that it does not describe the code I had written. It only describes my intent for that code. Code being reused, or shared, is incredibly common. Utility code, shared code, library code, package code. These names are all to do with intent, rather than describing what the code is. I should have stuck to putting my code in a &lt;code&gt;database/&lt;/code&gt; directory. Forget the shared part.&lt;/p&gt;
&lt;p&gt;So, what have we learned? We shouldn&#39;t call shared code shared, or utils, or common. It should just be code: named for what it is.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Three unusual qualities we look for to hire amazing developers</title>
		<link href="https://dgls.dev/posts/three-unique-qualities/"/>
		<updated>2020-12-11T12:00:00+00:00</updated>
		<id>https://dgls.dev/posts/three-unique-qualities/</id>
		<content type="html">
		  &lt;p&gt;Here at Shamaazi, we’ve recently gone through a round of hiring… and wow, hiring is hard!&lt;/p&gt;
&lt;p&gt;It’s challenging finding engineers who have the right qualities, attitude and personality to join a team. We’re a &lt;strong&gt;tiny&lt;/strong&gt; company, with just 2 engineers, so any new teammates have a massive impact on our products and culture.&lt;/p&gt;
&lt;p&gt;We’re super careful about who we hire because of this.&lt;/p&gt;
&lt;p&gt;We don’t expect or search for rockstar developers who can recite algorithms and live and breath software. We don’t expect the world’s most qualified experts in the technology we use. We don’t expect people to spend every moment of their spare time programming.&lt;/p&gt;
&lt;p&gt;The qualities we do look for are probably considered unusual compared to most software engineering outfits. Let&#39;s take a look at the three we use to ensure a good fit for working at Shamaazi.&lt;/p&gt;
&lt;h2&gt;Eagle-eyed attention to detail 🔍&lt;/h2&gt;
&lt;p&gt;We give our potential candidates a short engineering assignment as part of our hiring process. We explicitly request that they don&#39;t spend more than an hour on it, but it still gives us a vast amount of information that just simply isn&#39;t evident from their CV.&lt;/p&gt;
&lt;p&gt;Reviewing these assignments has been eye-opening. Most solutions lack attention to detail in at least one area. We begin by asking relatively simple questions of the submissions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Correctness&lt;/strong&gt; – does the solution work for all inputs?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Validation&lt;/strong&gt; – are the inputs validated, what happens if we try to break the system?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; – How do we know their solution is correct? Is there any proof that it reliably works?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quality&lt;/strong&gt; – How easy is their solution to understand, maintain or extend?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most technical tests we’ve seen fail on at least two or three of these, if not all four. Quite simply, they lack attention to detail in both their quality and behaviour.&lt;/p&gt;
&lt;p&gt;This lack of attention to detail also applies to CVs. We’ve seen poor grammar, typos and even sentences that don’t make sense! Quite frankly, if they can’t complete a short assignment with rigour, or can’t write a CV without errors, can we really trust them with a product that could shape the future of our company?&lt;/p&gt;
&lt;h2&gt;The ability to express clearly 🗣️&lt;/h2&gt;
&lt;p&gt;Writing good code, a good CV, or writing prose all have a lot in common. They are all forms of &lt;a href=&quot;https://dgls.dev/posts/communication/&quot;&gt;communication&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Writing good code is about communicating a set of requirements both to the computer, and to a future maintainer, CVs communicate your skills and knowledge to a potential employer, and prose is a form of communicating ideas by writing them down.&lt;/p&gt;
&lt;p&gt;As a result, the ability to express yourself clearly is super important. Engineering teams don’t work in isolation, and working remotely causes a whole new set of challenges for communication. In order to stay well-aligned, agile, and have the ability to discuss complicated topics, we communicate constantly as a team. This is a fundamental aspect of a team being &lt;a href=&quot;https://timreview.ca/article/567&quot;&gt;high-performing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, when reviewing engineers, we have to consider a few key questions:
Does their code communicate its purpose clearly? Is it well structured? Well written? Does it clearly separate concerns? Does it have sensible naming?
Does their CV communicate their strengths and experience eloquently and concisely?
When prompted in an interview, can a candidate clearly express their thought-process? Can they articulate complicated ideas?&lt;/p&gt;
&lt;p&gt;If the answer to all of these is ‘yes’, then we know we have a candidate who is going to be a delight to work with.&lt;/p&gt;
&lt;h2&gt;A positive outlook 😄&lt;/h2&gt;
&lt;p&gt;This one sounds strange, but I was first introduced to the idea by Patrick Collison, the Founder and CEO of Stripe. In his excellent talk &lt;a href=&quot;https://www.youtube.com/watch?v=fPfYN5gU_C0&quot;&gt;‘How to Scale’&lt;/a&gt;, Patrick discusses in great depth the difficulties in building the culture he wanted.&lt;/p&gt;
&lt;p&gt;At an ideal company, we would go to work and everyone would be happy. People would love their jobs and be enthusiastic and supportive. The question then becomes: ‘how do we create a company where this is the culture? Where the atmosphere is happy’. This is an incredible challenge, one that has no easy solution.&lt;/p&gt;
&lt;p&gt;As a side note, if anyone knows how to build a company that can turn unhappy people into happy ones, please let me know (I’d like to send my parents there)!&lt;/p&gt;
&lt;p&gt;Thankfully, Patrick Collison also shared his ‘cheat’ to achieve this. Simply hire people who are happy, positive people already. This is the culture we want to build, so we’re taking the same shortcut he did at Stripe. By hiring happy people, we can ensure we maintain a happy culture.&lt;/p&gt;
&lt;h2&gt;Closing Thoughts&lt;/h2&gt;
&lt;p&gt;As a tiny company, we have to be incredibly careful about the people we hire. They can have a massive impact on our products, for better or for worse, and contribute heavily towards our culture. Because of this, we deliberately look for these three qualities as signs of excellence in people.&lt;/p&gt;
&lt;p&gt;If we can find people to hire who show three key qualities: a happy outlook, the ability to express themselves clearly, and a keen eye for details, then we know they will be a brilliant hire.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Would you like to hear more about our hiring process? Do you want to know more about the problems people have in our technical assessment, or the common errors on CVs? Get in touch and let me know.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Enjoyed this post? Want to share your thoughts on the matter? Found this article helpful? Disagree with me? Let me know by &lt;a href=&quot;https://dgls.dev/posts/three-unique-qualities/twitter.com/dglsparsons&quot;&gt;messaging me on Twitter&lt;/a&gt;.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Testing is important: three ways to easily improve test quality</title>
		<link href="https://dgls.dev/posts/testing-is-important/"/>
		<updated>2020-12-18T14:30:00+00:00</updated>
		<id>https://dgls.dev/posts/testing-is-important/</id>
		<content type="html">
		  &lt;p&gt;It’s no secret that testing is important. We rely on tests to describe intended behaviour, catch any subtle bugs and prevent regressions in our code. But why are tests always such a pain to write well? In mature codebases tests quickly become convoluted and, in my experience, testing is one of the most challenging aspects of software engineering.&lt;/p&gt;
&lt;p&gt;This is because we don’t hold our tests – unit tests, integration tests, end-to-end tests or smoke-tests – to the same standards production code. Poor testing can make a codebase even more difficult to maintain than having no tests at all. Despite this, good testing practice flies under the radar and is easily neglected.&lt;/p&gt;
&lt;p&gt;Let&#39;s challenge this and look at three qualities we expect of good production code, and apply this same thinking to test code – where such quality control is often absent.&lt;/p&gt;
&lt;h2&gt;1) Don’t Repeat Yourself (DRY) 🔁&lt;/h2&gt;
&lt;p&gt;People are obsessed with DRY when it comes to production code, often taking it &lt;a href=&quot;https://dev.to/wuz/stop-trying-to-be-so-dry-instead-write-everything-twice-wet-5g33&quot;&gt;too far&lt;/a&gt;. This same anti-repeating is rarely applied to tests. Instead, testing becomes a haven for duplication, with information copied all-over the place. This is most prevalent in two forms.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Asserting&lt;/strong&gt; – Often there are a tonne of very similar tests, copy pasted with minor tweaks. In reality, they often cover the same test case, with the rationale that it’s “making extra sure”.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Setup&lt;/strong&gt; – Some tests require laborious setup. Creating mock users, seeding test-data and making sure any dependencies are stubbed out. This setup often gets duplicated between tests or test-suites, with only minor tweaks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Duplicating assertions and setup both have the same knock-on impact. Bug-fixes, feature tweaks or refactoring quickly becomes a headache. Instead of being able to make a simple modification, a change becomes a game of whack-a-mole, wading through duplicated logic with seemingly unrelated tests starting to fail. You then notice some mocks are wrong, some tests don’t even work. We end up feeling like we need a sledgehammer rather than a scalpel.&lt;/p&gt;
&lt;p&gt;Dave Cheney published a brilliant micro-blog on this very topic - you should definitely &lt;a href=&quot;https://dave.cheney.net/2020/12/15/the-story-of-the-one-line-fix&quot;&gt;check it out&lt;/a&gt;. It summarises the mentality behind most duplication far better than I can.&lt;/p&gt;
&lt;h2&gt;2) Scrutinize tests the same as any other code 🔍&lt;/h2&gt;
&lt;p&gt;I recently &lt;a href=&quot;https://dgls.dev/posts/avoid-utils/&quot;&gt;wrote a post on&lt;/a&gt; one of the larger projects I’ve worked on during my career. This project, despite having some talented engineers working on it, was a complete mess. In particular, let&#39;s talk about code reviews and tests.&lt;/p&gt;
&lt;p&gt;We all worked in the same physical office, so pull-requests were usually reviewed face-to-face.&lt;/p&gt;
&lt;p&gt;This was great and worked really well – it was much easier to have open discussions, loop in people who should be involved, or to get answers to questions. I once overheard a discussion over a pull-request between two experienced developers. Their conversation bounced around discussing sensible topics – the high-level approach to solving a problem, justifying the design and making sure it was efficient. They then delved into the low-level, technical details – making suggestions for improving variables names, neatening up some abstractions, adhering to best practices and agreed standards.&lt;/p&gt;
&lt;p&gt;Then it came to &lt;s&gt;reviewing&lt;/s&gt; the tests.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Yeah, it has tests&amp;quot;&lt;/em&gt; said one engineer to the other. &lt;em&gt;&amp;quot;Do they pass?&amp;quot;&lt;/em&gt;, the second questioned. &lt;em&gt;&amp;quot;Yes&amp;quot;&lt;/em&gt;, replied the first. &lt;em&gt;&amp;quot;That&#39;s good&amp;quot;&lt;/em&gt;, confirmed the second, as both engineers sat nodding to each other as they absent-mindedly scrolled through several hundred lines of tests.&lt;/p&gt;
&lt;p&gt;Let&#39;s look at the real problem here: the measure of quality had nothing to do with the tests, beyond them simply existing and passing. There was no discussion around edge cases. Were they testing the right things? Was the generation of the test data suitable? Did they take the right approach to mocking? Did the tests even accurately describe what they&#39;re doing.&lt;/p&gt;
&lt;p&gt;It came to no surprise to anyone, certainly myself, that the majority of tests on the project were useless. Needlessly so, too. By asking simple questions and caring enough to review the tests properly, they could have saved hours of work later down the line, for the sake of five minutes now.&lt;/p&gt;
&lt;h2&gt;3) Avoid mocking integrations in integration tests 🔗&lt;/h2&gt;
&lt;p&gt;It sounds obvious when it’s written out like that, right? But you’d be amazed how often this happens. Consider that we are writing a function responsible for adding new users to a mailing list for a product. A test for this might look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mailing list list&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;emailStorage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;save&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;emailStorage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rollback&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;should add an email to a mailing list&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; email &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mockEmail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; mailingList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEmail&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      email&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      subscribed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;emailStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;emailStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rollback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toNotHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks fairly typical, right? Although you could say that’s a lot of mocking for one test. It prompts the question:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“What are we actually testing here?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Are we &lt;em&gt;unit&lt;/em&gt; testing the logic the function contains? Or are we testing that it &lt;em&gt;integrates&lt;/em&gt; properly with the email storage?&lt;/p&gt;
&lt;p&gt;If it&#39;s a unit test, you’d argue to mock as much as you can so you are just testing the logic.  We seem to be asserting on the mocks a lot though, which wouldn’t be the case if we weren’t also testing the integration.&lt;/p&gt;
&lt;p&gt;In this case, how useful really is this test? It’s attempting to test an integration by integrating with a mock. This test looks a lot like it’s not really testing any behaviour at all - it’s just checking that the code does what the code does, at the same level of abstraction.&lt;/p&gt;
&lt;p&gt;Say for example, that the email storage didn’t behave the way we expected it to. Would this test fail? Should this test fail? If we rewrote the test to use the real email storage, and then tested it worked in reality, would this be more valuable?&lt;/p&gt;
&lt;h2&gt;Closing Remarks 💬&lt;/h2&gt;
&lt;p&gt;Tests are just more code. More code that you should treat with the same level of respect as any other code. Write them well, and they can be a powerful asset that help you safely refactor and add new features. Write them poorly, and they will quickly become a burden. Every change you make becomes wading through mud, sledgehammer in hand. We must think carefully how to write our tests, and be as meticulous with testing as we are with the rest of our code. Unless we do this, tests are a nightmare.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Creating challenges: three ways to improve the technical assessment</title>
		<link href="https://dgls.dev/posts/creating-challenges/"/>
		<updated>2020-12-30T18:45:00+00:00</updated>
		<id>https://dgls.dev/posts/creating-challenges/</id>
		<content type="html">
		  &lt;p&gt;Through December, I spent a large amount of time doing two things: working my way through the 2020 &lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent Of Code&lt;/a&gt;; and assessing applications for a job opening we had at Shamaazi. The two initially sound unrelated, but part of our hiring process involves sending candidates an engineering assignment. Similarly, some people use Advent Of Code as &lt;a href=&quot;https://y3l2n.com/2018/05/09/interview-prep-advent-of-code/&quot;&gt;interview preparation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s safe to say I spent most of December looking at or thinking about programming challenges 👀&lt;/p&gt;
&lt;p&gt;I’ve been reflecting on ‘what makes a good engineering assessment’, and I’ve come to the conclusion that a good assessment – as part of recruiting – should pay careful attention to three main things.&lt;/p&gt;
&lt;h2&gt;1) Keep it simple, stupid (KISS) 😗&lt;/h2&gt;
&lt;p&gt;If you’re applying for a new programming job, changing career or trying to get your foot onto the ladder, then the chances are you’re applying to a few different companies. Even if you’re just applying to one though, it takes time. Time to write a CV, time to write a cover letter, research the company, send an application, prep for an interview. Engineering assignments are just one more thing that can eat away at your time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Time is a limited resource.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Expecting candidates to spend hours decrypting sparse instructions, or spend hours going ‘above and beyond’ in implementing a solution just further reduces any free time they would have. Having lengthy tech-assessments, or expecting candidates to devote their lives to you just creates a false barrier to entry. Some of the best developers I know have lives, kids, families or hobbies outside of their jobs. When recruiting, you should look for well-rounded individuals, not just those who &lt;a href=&quot;https://dgls.dev/posts/three-unique-qualities/&quot;&gt;live and breathe software development&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So instead, let’s keep Tech Assessments short. Not simple, but short – short enough that they can be done in a small amount of time. Short so the instructions are easy to wrap your head around. Short so you don’t feel like you have to work all weekend just for a chance at an interview. Because let’s face it, nobody wants that.&lt;/p&gt;
&lt;h2&gt;2) Make sure it’s explicitly clear what you’re looking for 👀&lt;/h2&gt;
&lt;p&gt;Recently, I had a friend apply to a new job. He’s a fantastic engineer, works incredibly hard, comes up with brilliant ideas and really contributes towards creating a fun-loving, happy culture. In my eyes, he’s exactly the sort of developer you would want to work with.&lt;/p&gt;
&lt;p&gt;As part of applying to a new job, he was asked to complete a short technical assessment. Nothing out of the ordinary here – he completed it pretty quickly and sent it over to me to check through. Together we checked through it and came away happy. It was a really neatly organised, clean and efficient solution to the problem he was given. So he submitted it.&lt;/p&gt;
&lt;p&gt;A week went by. &lt;em&gt;No response.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Another week went by. &lt;em&gt;No response.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;By this point, he began to get agitated. Maybe they had missed his email, maybe they had forgotten to look at his solution? Maybe the person intended to review it was on leave?&lt;/p&gt;
&lt;p&gt;So he reached out to them, expressing his concerns, wondering what had happened. Why had he got no reply? They emailed him back a simple, short answer:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;”your submission, while solving the given solution, did not go above and beyond and as a result, was not what we were looking for&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;He told me this, and I was immediately outraged. How could they be so stupid to pass up on a talented engineer? Why would they want their engineers to show terrible self-control, to be constantly going off-piste? After some reflection, I realised the problem wasn’t just that they were looking for the wrong characteristics in their developers, but that they had never made it clear in their assignment what they wanted you to do. If they didn’t really care about the solution to the problem, but what you did above and beyond that, then why didn’t they say so?&lt;/p&gt;
&lt;p&gt;So instead, let’s keep it explicitly clear what qualities we wish people to display, what areas they should focus on, and make sure it’s crystal clear what they should do. Communication, after all, is a &lt;a href=&quot;https://dgls.dev/posts/communication/&quot;&gt;key skill&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;3) Make sure the challenge is representative 🏁&lt;/h2&gt;
&lt;p&gt;It’s very easy to forget when you’re screening candidates and reviewing tech assessments, but every single part of the recruitment process communicates what it’s like to work at a company. Job descriptions give a clear indication of the role, invitation emails should give a bit of a sense of the people who work at a company. Equally, a technical assessment should give an indication of the type of work you will be doing.&lt;/p&gt;
&lt;p&gt;If an assignment is all about React hooks, then that’s a strong indication I’ll both need to learn React, and that I’d be writing a tonne of React at that job.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sounds obvious, right?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But people seem to forget this. Instead, they focus on &lt;a href=&quot;https://hackernoon.com/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0&quot;&gt;obscure algorithms&lt;/a&gt;, copy-pasted katas, or completing contrived challenges –like Advent of Code, fun as it is.&lt;/p&gt;
&lt;p&gt;So instead, let’s make technical assessments relevant. Rather than reaching for an obscure problem, what’s the most recent, complicated piece of code you had to write, or edit, or maintain? Can that be explained in a short brief? If so, let’s use that instead.&lt;/p&gt;
&lt;h2&gt;Closing thoughts 💭&lt;/h2&gt;
&lt;p&gt;Technical challenges are an incredibly useful tool to use as part of the hiring process. They can often give a much better indication of a candidate than any amount of phone screening, whiteboard-quizzing, or CV scrutinising can. But we have to be careful with them.&lt;/p&gt;
&lt;p&gt;Through creating representative challenges, keeping technical assessments lightweight and mindful of time, and by making it explicitly clear what qualities a good candidate would show, we can create technical assessments that don’t feel irrelevant, don’t feel like a time-drain, and are much more useful to both the assessor and the assessee.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Want to know more of my thoughts on recruitment? Read about the &lt;a href=&quot;https://dgls.dev/posts/three-unique-qualities/&quot;&gt;qualities I believe developers should show&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Do you want to know more about the problems people have in technical assessments? Would you like to know how to avoid these pitfalls when completing a technical assessment? Please &lt;a href=&quot;https://twitter.com/dglsparsons&quot;&gt;get in touch&lt;/a&gt; and let me know.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>3 popular technologies that I will strive to never use again</title>
		<link href="https://dgls.dev/posts/never-again/"/>
		<updated>2021-01-08T14:45:00+00:00</updated>
		<id>https://dgls.dev/posts/never-again/</id>
		<content type="html">
		  &lt;p&gt;There are a lot of different technologies out there. More than anyone could possibly explore. The de-facto position is to look for technologies that are popular, following the logic that “if enough people like it, it must be good”.&lt;/p&gt;
&lt;p&gt;In my experience, this isn’t always the case though.&lt;/p&gt;
&lt;p&gt;Throughout my career, I’ve worked across a wide range of technologies. While I’ve grown to love some of them, at times I felt like I was fighting a losing battle and spending more time scrapping with technology rather than solving real-world problems. Whenever this is the case, I make a mental note to avoid that technology in future.&lt;/p&gt;
&lt;p&gt;Here are the three I found the most painful to use.&lt;/p&gt;
&lt;h2&gt;1) Django ⏰&lt;/h2&gt;
&lt;p&gt;Django is a hugely popular framework for developing websites using a model-template-view architectural pattern. It’s amazing for getting something done very quickly. It also comes with a fantastically powerful Object Relational Mapper (ORM). So what’s the problem?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Its opinions are too strong!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you’re working just with a relational database, and only want model-template-view, and you’re completely fine with containerising and managing your own scaling, then it may be completely fine. When I used it we were updating our architecture though. Our entire workload wasn’t suited to a relational database and we wanted to take more benefit from auto-scaling, lambdas and managed services in AWS. We were also looking to use React to build more complete experiences for our UI. This became a real break-away from the Django core use-cases. As time went on, we began fighting Django’s opinions more and more. Every change became a battle, digging through the documentation and hacking in workarounds. Over time the codebase became scrappier and scrappier.&lt;/p&gt;
&lt;p&gt;Django didn’t feel like the right tool for us. It felt messy and difficult to avoid. If used in its particular setting, it’s probably fine, but it’s not for me.&lt;/p&gt;
&lt;h2&gt;2) Scala 🐌&lt;/h2&gt;
&lt;p&gt;Scala is designed to avoid the pitfalls of Java. It runs on the JVM, allows interop with existing Java code, yet provides a much stronger type system and enables functional paradigms.&lt;/p&gt;
&lt;p&gt;Despite being in many ways an obvious improvement over Java, my experience with the language was not great. There were two main pitfalls I encountered: quirky behaviour and tooling.&lt;/p&gt;
&lt;p&gt;As Scala derives from Java but mixes in functional paradigms, the language contains a huge amount. While being a strength in some ways, parts of Scala have some bizarre hangovers. We’ve all &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;mocked JavaScript&lt;/a&gt; for some of its bizarre and unexpected behaviour in code that looks correct. Scala often takes this to another level. It’s easy to slip up when writing code, and unless you know the language incredibly well, need to constantly be on the lookout for &lt;a href=&quot;https://nrinaudo.github.io/scala-best-practices/&quot;&gt;common pitfalls&lt;/a&gt; (or set up a linter for these).&lt;/p&gt;
&lt;p&gt;The second issue I faced with the language was really poor tooling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting support in vim (my editor of choice) was a nightmare,&lt;/li&gt;
&lt;li&gt;Automatically formatting code was far more difficult than I expected,&lt;/li&gt;
&lt;li&gt;Finding a lightweight logger that didn’t require a thousand line XML file was impossible,&lt;/li&gt;
&lt;li&gt;Setting up linting rules for all the common language quirks was an exercise in finding unmaintained repositories and configuring XML,&lt;/li&gt;
&lt;li&gt;And, finally, once everything finally worked together, I was stuck battling slow compile times and integration tests that were slower than intercontinental drift.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a popular language, I was really surprised. There were bits I loved, but overall the experience was akin to pulling teeth. Not one I’d go in for again!&lt;/p&gt;
&lt;h2&gt;3) Segment 💰&lt;/h2&gt;
&lt;p&gt;Last year, we stumbled across &lt;a href=&quot;https://segment.com/&quot;&gt;Segment&lt;/a&gt;. A fantastic looking tool that drastically reduces the amount of tracking code you need to write. It allows seamless integration into a plethora of different services and seemed to match up precisely with what we wanted. Pricing wise there’s a generous free tier (1,000 Monthly Active Users), and competitive pricing outside of this, or so we thought... Reading around on the internet, it was generally well-received, so we thought we’d give it a try.&lt;/p&gt;
&lt;p&gt;Plugging it into our website was a straightforward experience, and it appeared to deliver on all its promises. We soon had all our events being fired into Segment and tracked across a range of different tools. Brilliant. We put it live.&lt;/p&gt;
&lt;p&gt;The next day, we had a sudden spike in traffic caused by a third-party accidentally scraping us repeatedly. Oops. While the third-party resolved the issue on their site, I logged back in to find out how our Monthly Active User (MAU) allowance had been affected.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It had been completely demolished&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not only had we overshot our MAU limit in a matter of hours, but we’d racked up a substantial bill. It turns out every single anonymous visit to our website was being counted as an additional MAU. Pricing per MAU meant overshooting our limit was expensive. We had to pull the ripcord and tear it out immediately.&lt;/p&gt;
&lt;p&gt;One expensive bill later, that’s a mistake I don’t want to make again.&lt;/p&gt;
&lt;h2&gt;Closing thoughts 💭&lt;/h2&gt;
&lt;p&gt;These three technologies have scarred me as a developer. Having had to fight through difficult situations with each one of them, I know I’ll strive to avoid them in the future. In my experience, Django, Scala and Segment just aren&#39;t worth the pain.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Do you have any technologies you feel the same about? Feel like I’ve missed some out? If so, what are they?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Think I’m wrong about any of these? Get in touch and let me know.&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
	
	<entry>
		<title>Tolerances: How Formula 1 pistons can teach us to be better developers</title>
		<link href="https://dgls.dev/posts/formula-1-pistons/"/>
		<updated>2021-01-18T11:00:00+00:00</updated>
		<id>https://dgls.dev/posts/formula-1-pistons/</id>
		<content type="html">
		  &lt;p&gt;Recently, while procrastinating from work, I found myself watching a youtube video on &lt;a href=&quot;https://www.youtube.com/watch?v=lCEKJxHiEIM&quot;&gt;Formula 1 pistons&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This video seeks to answer the question: why does a Formula 1 car piston cost around 1,000 times the amount of a typical road car (£50,000 vs £50), despite appearing very similar and serving the same purpose?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/pistons.jpg&quot; alt=&quot;Whispering&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Left: piston from an American muscle car. Right: piston from a formula 1 car.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, what does this teach us about programming, and how to be a better developer?&lt;/p&gt;
&lt;h2&gt;The cost of immaculate tolerances 💰&lt;/h2&gt;
&lt;p&gt;Manufacturing a car piston is a game of playing with tolerances.&lt;/p&gt;
&lt;p&gt;The piston itself has to fit into a cylinder block snugly, with a small gap around the sides to allow it to move freely. If the gap between a piston and the cylinder is too big, then burning fuel can escape, and the piston is far less efficient. If the gap is too small, then the piston can seize up, blocking the engine completely.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dgls.dev/img/remote/piston-cycle.jpg&quot; alt=&quot;Piston Cycle&quot;&gt;
&lt;em&gt;The process a car piston goes through in a single cycle&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This adds some serious complexity for building these parts. Not only do they have to be designed to an incredible specification, but the margin for error when manufacturing these parts is so small that they require specialised machinery and special processes to make sure they are fit for purpose.&lt;/p&gt;
&lt;p&gt;Rather than immaculate tolerances, what if we wanted to be able to guarantee the quality of code we write as programmers? Imagine if a single bug in your code would be a catastrophic failure or even a risk to life. Would that change the way you write code? Would it change the way you review and test code? And how do you think that would affect the speed at which you develop?&lt;/p&gt;
&lt;p&gt;No doubt development would be much slower. Just like the creation of pistons for Formula 1, the process would have to become far more thorough. You would need specific tools and processes to guarantee the right results. You would have to change the way you approach writing software to ensure it behaved exactly as you wanted in every possible situation. And, no doubt, the overall cost of developing software would become much greater as a result of these changes.&lt;/p&gt;
&lt;p&gt;When we write software, we have to bear this situation in mind. It’s easy to claim that everything should be of the highest possible quality, but there is a cost for achieving that. Instead, the bar for quality needs to appropriate for the task at hand. Set your tolerances too small, and development becomes slow and expensive. Set them too low, and you end up with inefficient results.&lt;/p&gt;
&lt;h2&gt;Regular oiling and refactoring 🛢️&lt;/h2&gt;
&lt;p&gt;In a typical road car, pistons require a bit of help to slide up and down inside their cylinder block: metal doesn’t slide particularly well over other metal, so a layer of oil makes the whole process much easier. In new cars, this oil is a very thin, watery liquid thanks to a solid manufacturing process of car engines. In classic cars, oil can be thick, black gunge - the difference being the gap between the piston and the cylinder block is much larger, so the oil needs to be much thicker to work across the gap. As Formula 1 cars have such minuscule tolerances, their pistons require no oil at all.&lt;/p&gt;
&lt;p&gt;Now, imagine oiling a car as being like refactoring code.&lt;/p&gt;
&lt;p&gt;What does that mean? Take an old banger of a codebase, and you’ll find yourself having to change the oil regularly. Changing the oil is a messy process that really involves rolling your sleeves up and diving in. It can take time to do, and by the time you’ve managed to do a big refactor, you’re sure everything will be running much smoother as a result, but you find you’re worn out and covered in bits of greasy old oil.&lt;/p&gt;
&lt;p&gt;What about a modern codebase? The oil here is much thinner: development practices have got a lot better and technology has really come a long way. As a result, we don’t have to spend nearly as much time under the bonnet. This is still an important part of our work, though. Much as a car needs a regular oil change, codebases need a regular touch up to keep them running. Don’t keep on top of this maintenance, and you never know when it’ll catch up to you with a bang.&lt;/p&gt;
&lt;p&gt;Finally, imagine our immaculate codebase from earlier, where quality and lack of bugs trumps all. This is the Formula 1 car of the software world. There’s no need for oil, so there’s no need for oil changes. If all the code here is perfect the first time around, why would we ever need to refactor?&lt;/p&gt;
&lt;h2&gt;Closing thoughts 💭&lt;/h2&gt;
&lt;p&gt;If we think of the two practises of managing tolerances or quality, and refactoring code as linked, then we draw some nice conclusions.&lt;/p&gt;
&lt;p&gt;Focussing on tolerances and quality the first time around can lead to a huge increase in upfront cost, both in terms of time and effort. This can net you some neat benefits though. Not only can you guarantee the codebase as bug-free and brilliant, but you end up with code that needs no further work. There’s little to no maintenance cost, and you’ll never find yourself refactoring.&lt;/p&gt;
&lt;p&gt;Conversely, a focus on the low-cost, fast-paced development necessitates a lower tolerance for quality. This can be useful for getting a project into the world, but comes with a cost later down the line: you need regular oil changes and refactoring to keep everything neat, or you risk blowing up with a bang.&lt;/p&gt;
&lt;p&gt;In reality, most codebases lie between these two extremes. Rather than focussing solely on one extreme or the other, we need to be mindful of a balance. Insisting on quality over all else is a tradeoff, and at times isn’t the right one to make. Equally, we need to be careful of the costs down the line in cutting upfront quality. Next time you review a pull-request or submit a new feature, think of this tradeoff: do we mind oiling this a bit later, or do we want an immaculate Formula 1 piston right now?&lt;/p&gt;

			
				
				
			
		</content>
	</entry>
</feed>
